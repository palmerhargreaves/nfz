<?php

/**
 * AgreementModel
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AgreementModel extends BaseAgreementModel
{
    const MODEL_FILE_PATH = 'activities/module/agreement/model_file';
    const AGREEMENT_COMMENTS_FILE_PATH = 'activities/module/agreement/agreement_comments_file';

    const CHILD_FILES_COUNT = 10;

    const SCENARIO_RECORD_STEP_FIRST = 'first';
    const SCENARIO_RECORD_STEP_SECOND = 'second';

    const UPLOADED_FILE_MODEL_TYPE = 'model';
    const UPLOADED_FILE_MODEL = 'model';

    const UPLOADED_FILE_REPORT = 'report';
    const UPLOADED_FILE_REPORT_TYPE = 'report';
    const UPLOADED_FILE_FINANCIAL_FILE_TYPE = 'report_financial';
    const UPLOADED_FILE_ADDITIONAL_FILE_TYPE = 'report_additional';
    const UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE = 'report_additional_ext';

    const UPLOADED_FILE_SCENARIO = 'model';
    const UPLOADED_FILE_SCENARIO_TYPE = 'model_scenario';

    const UPLOADED_FILE_RECORD = 'model';
    const UPLOADED_FILE_RECORD_TYPE = 'model_record';

    const BY_SCENARIO = 'scenario';
    const BY_RECORD = 'record';

    protected $loaded_values = null;
    protected $declines = null;

    private $_outOfDays = 0;

    function setUp()
    {
        parent::setUp();

        $this->addListener(new UploadHelper('model_file', self::MODEL_FILE_PATH));
        $this->addListener(new UploadHelper('model_record_file', self::MODEL_FILE_PATH));

        $this->addListener(new UploadHelper('agreement_comments_file', self::AGREEMENT_COMMENTS_FILE_PATH));

    }

    /**
     * Sets values depending on an type of this agreement model.
     *
     * @param array $values
     */
    function setValuesByType($values)
    {
        $model_type = $this->getModelType();
        if (!$model_type)
            throw new UnknowModelTypeException();

        AgreementModelValueTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('model_id=?', $this->getId())
            ->execute();

        foreach ($model_type->getFields() as $field) {
            $value = new AgreementModelValue();
            $value->setField($field);
            $value->setModel($this);
            $value->setValue(isset($values[$field->getIdentifier()]) ? $values[$field->getIdentifier()] : '');
            $value->save();
        }
    }

    function countWaitingSpecialists()
    {
        if ($this->getStatus() != 'wait_specialist')
            return 0;

        return AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->where('model_id=? and status=?', array($this->getId(), 'wait'))
            ->count();
    }

    function countReportWaitingSpecialists()
    {
        return $this->getReport() ? $this->getReport()->countWaitingSpecialists() : 0;
    }

    function countDeclines()
    {
        if ($this->getStatus() != 'declined')
            return 0;

        if ($this->declines === null) {
            $this->declines = AgreementModelCommentTable::getInstance()
                ->createQuery()
                ->where('model_id=? and status=?', array($this->getId(), 'declined'))
                ->count();
        }
        return $this->declines;
    }

    function isOutOfDate($outDays = 0, $sendArray = false)
    {
        $reportId = null;
        $report = $this->getReport();
        if (!empty($report))
            $reportId = $report->getId();

        $today = strtotime(date('Y-m-d H:i:s'));
        if ($this->getAllowUseBlocked() == 1 && $this->getUseBlockedTo() != "") {
            $blockedDateTo = strtotime($this->getUseBlockedTo());

            if ($today > $blockedDateTo) {
                $this->setAllowUseBlocked(0);
                $this->setUseBlockedTo('');
                $this->save();

                return true;
            }
        }

        if ($this->getAllowUseBlocked() == 1 || $this->getStatus() != 'accepted' || !is_null($reportId) || $reportId != 0)
            return false;

        $values = $this->getValues();

        $value = '';
        $ids = array(31, 30, 29, 4, 7, 11, 15, 19, 25);
        foreach ($values as $v) {
            if (in_array($v->getFieldId(), $ids))
                $value = $v->getValue();
        }

        if (empty($value)) {
            return $sendArray ? array('status' => false) : false;
        } else {
            $value = explode('-', $value);
            if (!empty($value[1])) {
                $value = $value[1];

                $value = explode('.', $value);
                $value = sprintf('%s-%s-20%s', $value[0], $value[1], $value[2]);
            } else
                return $sendArray ? array('status' => false) : false;
        }

        if (is_array($value))
            return false;

        if ($outDays <= 0) {
            $outDays = sfConfig::get('app_model_block_days');
        }

        $value = $this->getNewDate($value, $outDays);

        $todayDate = strtotime(date('d-m-Y'));
        $todayDays = $this->getElapsedDays($todayDate);

        $lastModelUpdateDate = strtotime($value);
        $lastModelUpdateDays = $this->getElapsedDays(strtotime($value));
        $elDays = $lastModelUpdateDays - $todayDays;

        $this->setOutOfDays($elDays);

        if ($todayDate >= $lastModelUpdateDate)
            return true;

        return false;
    }

    function checkDateInCalendar($date)
    {
        return D::checkDateInCalendar($date);;
    }

    public function getOutOfDays()
    {
        return $this->_outOfDays;
    }

    public function setOutOfDays($days)
    {
        $this->_outOfDays = $days;
    }

    function getElapsedDays($st)
    {
        return floor(($st / 3600) / 24);
    }

    function isConcept()
    {
        return $this->getModelType() ? $this->getModelType()->getConcept() : false;
    }

    function getCssStatus()
    {
        if ($this->getStatus() == 'accepted')
            return 'ok';

        if ($this->isModelScenario() && $this->getStep1() != "none") {
            if ($this->getStatus() == "wait" && ($this->getStep2() == "none" || $this->getStep2() == "wait")) {
                return 'clock';
            } else if ($this->getStep1() == 'accepted' && $this->getStep2() == "accepted") {
                return 'ok';
            } else if ($this->getStatus() != "declined" && $this->getStep1() != 'accepted' && $this->getStep2() != "accepted" || $this->getStatus() == "wait_specialist") {
                return 'clock';
            } else {
                return 'pencil';
            }
        }

        switch ($this->getStatus()) {
            case 'wait':
            case 'wait_specialist':
                return 'clock';
            case 'not_sent':
            case 'declined':
                return 'pencil';
        }

        return 'none';
    }

    function getReportCssStatus()
    {
        $status = $this->getReport() ? $this->getReport()->getStatus() : 'not_sent';

        switch ($status) {
            case 'wait':
            case 'wait_specialist':
                return 'clock';
            case 'accepted':
                return 'ok';
            case 'declined':
                return 'pencil';
        }

        if ((!$status || $status == 'not_sent') && $this->getStatus() == 'accepted')
            return 'pencil';

        return 'none';
    }

    function getDealerActionText()
    {
        $status = $this->getStatus();

        if ($this->getIsBlocked() && !$this->getAllowUseBlocked()) {
            return 'Заблокирована';
        }

        if ($status == 'not_sent')
            return $this->isConcept() ? 'Отправьте концепцию на согласование' : 'Отправьте макет на согласование';

        if ($status == 'wait') {
            if ($this->getManagerStatus() == 'wait' && $this->getDesignerStatus() == 'wait') {
                return $this->isConcept() ? 'Дождитесь согласования концепции' : 'Дождитесь согласования макета';
            } else {
                if ($this->getManagerStatus() == 'declined' && $this->getDesignerStatus() == 'accepted') {
                    return $this->isConcept() ? 'Внесите исправления в концепцию' : 'Внесите исправления в макет';
                }
            }
        }

        if ($status == 'wait_specialist')
            return $this->isConcept() ? 'Дождитесь согласования концепции специалистами' : 'Дождитесь согласования макета специалистами';

        if ($status == 'declined')
            return $this->isConcept() ? 'Внесите исправление в концепцию' : 'Внесите исправления в макет';

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : false;

            if (!$report_status)
                return 'Загрузите отчёт';

            if ($report_status == 'not_sent')
                return 'Отправьте отчёт на согласование';

            if ($report_status == 'wait')
                return 'Дождитесь согласования отчёта';

            if ($report_status == 'wait_specialist')
                return 'Дождитесь согласования отчёта специалистами';

            if ($report_status == 'declined')
                return 'Внесите исправления в отчёт';
        }

        return '';
    }

    function getManagerActionText($isDealer = false)
    {
        $status = $this->getStatus();

        if ($this->getIsBlocked() && !$this->getAllowUseBlocked()) {
            return 'Заблокирована';
        }

        if ($status == 'wait')
            return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте макет';

        if ($status == 'declined')
            return $this->isConcept() ? 'Ожидайте правок концепции' : ($isDealer ? 'Ожидаются правки макета' : 'Ожидайте правок макета');

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : false;

            if (!$report_status)
                return $isDealer ? 'Ожидается отчет' : 'Ожидайте отчёт';

            if ($report_status == 'not_sent')
                return $isDealer ? 'Ожидается отчет' : 'Ожидайте отчёт';

            if ($report_status == 'wait')
                return 'Согласуйте отчёт';

            if ($report_status == 'declined')
                return 'Ожидайте правок отчёта';
        }

        return '';
    }

    function getSpecialistActionText($isDealer = false)
    {
        $status = $this->getStatus();

        if ($status == 'wait_specialist')
            return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте макет';

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : false;

            if (!$report_status)
                return $this->isConcept() ? 'Ожидайте концепцию' : ($isDealer ? 'Ожидается отчет' : 'Ожидайте отчёт');

            if ($report_status == 'wait_specialist')
                return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте отчёт';
        }

        return '';
    }

    function getModelAcceptToDateFromLog()
    {
        $days = 3;
        if ($this->getStatus() == "accepted") {
            $days = 5;
        }

        $data = Utils::getModelDateFromLogEntryWithYear($this->getId(), true);
        if ($data) {
            return $this->getNewDate($data->getCreatedAt(), $days);
        }

        return $this->getUpdatedAt();
    }

    /**
     * @param null $calcDate
     * @return bool|string
     */
    function getModelReportAcceptToDate($calcDate = null)
    {
        $date = $calcDate;

        if (is_null($date)) {
            $data = Utils::getModelDateFromLogEntryByActions($this->getId(), true, array('sent_to_specialist', 'edit'));
            if ($data) {
                $date = $data->getCreatedAt();
            }
        }

        return $this->getNewDate($date ? $date : $this->getReport()->getUpdatedAt(), 5);
    }

    function getNewDate($date, $plusDays = 3)
    {
        for ($i = 1; $i <= $plusDays; $i++) {
            $tempDate = date("d-m-Y H:i:s", strtotime('+' . $i . ' days', D::toUnix($date)));
            $d = getdate(strtotime($tempDate));

            //Проверка даты на праздничный день установленный в календаре
            $dPlus = $this->checkDateInCalendar($tempDate);

            //Если в календаре нет данных, делаем проверку на выходные
            if ($dPlus == 0) {
                if ($d['wday'] == 0 || $d['wday'] == 6) {
                    $dPlus++;
                }
            } else {
                //Если данные есть в календаре, добавляем количество праздничных дней
                $i += ($dPlus - 1);
            }

            $plusDays += $dPlus;
        }

        return date("H:i:s d-m-Y", strtotime('+' . $plusDays . ' days', D::toUnix($date)));
    }

    function getModelAcceptToDate($isDealer = false)
    {
        if (!$isDealer) {
            return $this->getModelAcceptToDateFromLog();
        } else if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() != "accepted") {
            return $this->getModelReportAcceptToDate();
        }

        return $this->getDateModelAccept();
    }

    function getDateModelAccept($days = 10)
    {
        $values = $this->getValues();

        $value = '';
        foreach ($values as $v) {
            if (in_array($v->getFieldId(), array(31, 30, 29, 4, 7, 11, 15, 19, 25))) {
                $value = $v->getValue();
            }
        }

        if (empty($value)) {
            return $this->getModelAcceptToDateFromLog();
        } else {
            $value = explode('-', $value);
            if (!empty($value[1])) {
                $value = explode('.', $value[1]);
                $value = sprintf('%s:%s:%s %s-%s-20%s',
                    date('h', strtotime($this->getCreatedAt())),
                    date('m', strtotime($this->getCreatedAt())),
                    date('s', strtotime($this->getCreatedAt())),
                    $value[0], $value[1], $value[2]);
            } else
                $value = $this->getCreatedAt();
        }

        return $this->getNewDate($value, $days);
    }

    /**
     * @param bool $isDealer
     * @param bool $specialReport
     * @param null $calcDate
     * @return bool
     */
    function isModelAcceptActiveToday($isDealer = false, $specialReport = false, $calcDate = null)
    {
        if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() != "accepted") {
            return $this->getModelReportAcceptActive($specialReport, $calcDate);
        } else if ($this->getStatus() == "accepted") {
            return false;
        }

        return $this->getModelAcceptActive($isDealer);
    }

    /**
     * @param bool $specialReport
     * @param null $calcDate
     * @return bool
     */
    function getModelReportAcceptActive($specialReport = false, $calcDate = null)
    {
        if ($specialReport) {
            return $this->compareAcceptDate($this->getDateModelAccept());
        }

        $date = $this->getModelReportAcceptToDate($calcDate);
        if (empty($date)) {
            return false;
        }

        return $this->compareAcceptDate($date);
    }

    function getModelAcceptActive($isDealer = false)
    {
        /*if(($this->getModelType()->getId() == 2 || $this->getModelType()->getId() == 4) && $this->getStep1() != "none") {
          return false;
        }*/

        $date = $this->getModelAcceptToDate($isDealer);
        if (empty($date)) {
            return false;
        }

        return $this->compareAcceptDate($date);
    }

    function compareAcceptDate($date_from_date)
    {
        $time_compare_date_model = strtotime($date_from_date);
        $time_compare_today = strtotime(date('H:i:s d-m-Y'));

        $date = getdate($time_compare_date_model);
        $today = getdate($time_compare_today);

        if ($date['mday'] == $today['mday'] && $date['month'] == $today['month'] && $date['year'] == $today['year']) {
            return true;
        } else if ($time_compare_date_model < $time_compare_today) {
            return true;
        }

        return false;
    }

    function getValueByType($name)
    {
        $this->loadValuesByTypeIf();

        return isset($this->loaded_values[$name]) ? $this->loaded_values[$name] : '';
    }

    function getValuesByType()
    {
        $this->loadValuesByTypeIf();

        return $this->loaded_values;
    }

    /**
     * Returns specialist comment
     *
     * @param User $user
     * @return AgreementModelComment|false
     */
    function getSpecialistComment(User $user)
    {
        return AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->where('model_id=? and user_id=?', array($this->getId(), $user->getId()))
            ->fetchOne();
    }

    protected function loadValuesByTypeIf()
    {
        if ($this->loaded_values === null)
            $this->loadByTypeValues();
    }

    protected function loadByTypeValues()
    {
        $values = AgreementModelValueTable::getInstance()
            ->createQuery('v')
            ->innerJoin('v.Field f')
            ->where('model_id=? and model_type_id=?', array($this->getId(), $this->getModelTypeId()))
            ->execute();

        $this->loaded_values = array();
        foreach ($values as $value)
            $this->loaded_values[$value->getField()->getIdentifier()] = $value->getValue();
    }

    function cancelSpecialistSending()
    {
        AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('model_id=?', $this->getId())
            ->execute();
    }

    /**
     * Creates a log entry copies for specialists commenting this model
     *
     * @param LogEntry $entry
     * @return array an array of copies
     */
    function createPrivateLogEntryForSpecialists(LogEntry $entry)
    {
        $copies1 = $this->createPrivateLogEntryForSpecialistsByModel($entry);

        $skip_users = array();
        foreach ($copies1 as $copy)
            $skip_users[] = $copy->getPrivateUserId();

        $copies2 = $this->createPrivateLogEntryForSpecialistsByReport($entry, $skip_users);

        return array_merge($copies1, $copies2);
    }

    protected function createPrivateLogEntryForSpecialistsByModel(LogEntry $entry)
    {
        return $this->createPrivateLogEntryForSpecialistsByComments($entry, $this->getComments());
    }

    protected function createPrivateLogEntryForSpecialistsByReport(LogEntry $entry, $skip_users)
    {
        $report = $this->getReport();

        return $report
            ? $this->createPrivateLogEntryForSpecialistsByComments($entry, $report->getComments(), $skip_users)
            : array();
    }

    protected function createPrivateLogEntryForSpecialistsByComments(LogEntry $entry, Doctrine_Collection $comments, $skip_users = array())
    {
        $copies = array();

        foreach ($comments as $comment) {
            if (!in_array($comment->getUserId(), $skip_users))
                $copies[] = $entry->createPrivateCopy($comment->getUser());
        }

        return $copies;
    }

    /**
     * Returns a file name helper for model
     *
     * @return FileNameHelper
     */
    function getModelFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $this->getModelFile());
    }

    function getModelRecordFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $this->getModelRecordFile());
    }

    function getModelFileNameHelperByFileName($name)
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $name);
    }

    /**
     * Returns a file name helper for a comments file
     *
     * @return FileNameHelper
     */
    function getAgreementCommentsFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::AGREEMENT_COMMENTS_FILE_PATH . '/' . $this->getAgreementCommentsFile());
    }

    function preSave($event)
    {
        if (!$this->getDiscussionId()) {
            $discussion = new Discussion();
            $discussion->save();
            $this->setDiscussionId($discussion->getId());
        }

        if ($this->getStatus() == 'wait')
            $this->setWait(true);
        elseif ($this->getReport() && $this->getReport()->getStatus() == 'wait')
            $this->setWait(true);
        else
            $this->setWait(false);

        if ($this->getStatus() == 'wait_specialist')
            $this->setWaitSpecialist(true);
        elseif ($this->getReport() && $this->getReport()->getStatus() == 'wait_specialist')
            $this->setWaitSpecialist(true);
        else
            $this->setWaitSpecialist(false);
    }

    function preDelete($event)
    {
        $discussion = $this->getDiscussion();
        if ($discussion && !$discussion->isNew())
            $discussion->delete();

        RealBudgetTable::getInstance()->removeByObjectOnly(ActivityModule::byIdentifier('agreement'), $this->getId());
    }

    function updateActivityTaskResult($activity, Dealer $dealer)
    {
        $tasks = $activity->getTasks();

        foreach ($tasks as $task) {
            if (($task->getId() == $this->getTaskId()) && $this->getCssStatus() != "ok") {
                $task->updateReportStatus($dealer, 1);
            }
        }
    }

    static function getBlockedModels()
    {
        return AgreementModelTable::getInstance()
            ->createQuery('m')
            ->where('year(m.created_at) = ? and m.blocked_inform != ? and m.status = ? and m.report_id IS NULL', array(date('Y'), 2, 'accepted'))
            ->orderBy('m.id DESC')
            ->execute();
    }

    public function getConcept()
    {
        return AgreementModelTable::getInstance()->find($this->getConceptId());
    }

    public function addDeclineFile($file)
    {
        $item = new AgreementModelAcceptDeclineFiles();

        $item->setModelId($this->getId());
        $item->setFileName($file);
        $item->setFileType('decline');

        $item->save();
    }

    public function addAcceptFile($file)
    {
        $item = new AgreementModelAcceptDeclineFiles();

        $item->setModelId($this->getId());
        $item->setFileName($file);
        $item->setFileType('accept');

        $item->save();
    }

    public function workWithScenatioAndRecordsData(sfWebRequest $request)
    {
        $step = strtolower(trim($request->getParameter('step')));

        if ($this->getModelType()->getId() == 4 || $this->getModelType()->getId() == 2) {
            if ($step === self::SCENARIO_RECORD_STEP_FIRST) {
                $this->setStep1("none");
                $this->setStep2("none");
            } else if ($step === self::SCENARIO_RECORD_STEP_SECOND) {
                $this->setStep2("none");
            } else {
                $this->setStep1("none");
                $this->setStep2("none");

                $this->setNoModelChanges(false);
            }
        }
    }

    public function getCalcDate()
    {
        $date = $this->getCreatedAt();
        if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() == "accepted") {
            $date = Utils::getModelDateFromLogEntryWithYear($this->getId());
        }

        return D::calcQuarterData($date);
    }


    public function workWithScenarioAndRadio()
    {
        if ($this->getModelType()->getId() == 4 || $this->getModelType()->getId() == 2) {
            if ($this->getStep1() != "accepted") {

                $this->setStatus('not_sent');

                $this->setStep1("accepted");
                $this->setStep2("wait");
            } else if ($this->getStep2() != "accepted") {
                $this->setStep2("accepted");
                $this->setStatus('accepted');
            }

            $this->save();
        }
    }

    public function getUploadedFilesListBy($objectType, $fileType, $count = false)
    {
        $query = AgreementModelReportFilesTable::getInstance()
            ->createQuery()
            ->select('*')
            ->where('object_type = ? and file_type = ? and object_id = ?',
                array
                (
                    $objectType,
                    $fileType,
                    $this->getId()
                )
            );

        if ($count) {
            return $query->count();
        }

        return $query->execute();
    }

    public function getUploadedFilesListByField($objectType, $field, $count = false)
    {
        $query = AgreementModelReportFilesTable::getInstance()
            ->createQuery()
            ->where('object_type = ? and field = ? and object_id = ?',
                array
                (
                    $objectType,
                    $field,
                    $this->getId()
                )
            );

        if ($count) {
            return $query->count();
        }

        return $query->execute();
    }

    public function getModelUploadedFiles($by_type = null)
    {
        if ($this->isModelScenario()) {
            if (is_null($by_type)) {
                return array();
            }

            return $this->getModelUploadedScenarioRecordFiles($by_type);
        }

        return $this->getUploadedFilesListBy(self::UPLOADED_FILE_MODEL, self::UPLOADED_FILE_MODEL_TYPE);
    }

    public function getModelUploadedScenarioRecordFiles($by_type, $count = false)
    {
        if ($by_type == self::BY_SCENARIO) {
            return $this->getUploadedFilesListBy(self::UPLOADED_FILE_SCENARIO, self::UPLOADED_FILE_SCENARIO_TYPE, $count);
        } else if ($by_type == self::BY_RECORD) {
            return $this->getUploadedFilesListBy(self::UPLOADED_FILE_RECORD, self::UPLOADED_FILE_RECORD_TYPE, $count);
        }
    }

    public function getFinancialDocsFiles()
    {
        return $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_FINANCIAL_FILE_TYPE);
    }

    public function getAdditionalFiles()
    {
        return $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE);
    }

    public function getAdditionalExtFiles()
    {
        return $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE);
    }

    public function getUploadedFileByTypeIdx($type, $idx)
    {
        $fields_types = array
        (
            AgreementModel::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => 'additional_file_ext_',
            AgreementModel::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => 'additional_file_'
        );

        if (array_key_exists($type, $fields_types)) {
            return AgreementModelReportFilesTable::getInstance()
                ->createQuery()
                ->where('file_type = ? and object_id = ? and field_name = ?',
                    array
                    (
                        $type,
                        $this->getId(),
                        sprintf('%s%s', $fields_types[$type], $idx)
                    )
                )
                ->fetchOne();
        }

        return null;
    }

    public function getUploadedFilesCount()
    {
        if ($this->isModelScenario()) {
            return array
            (
                self::BY_SCENARIO => $this->getModelUploadedScenarioRecordFiles(self::BY_SCENARIO, true),
                self::BY_RECORD => $this->getModelUploadedScenarioRecordFiles(self::BY_RECORD, true)
            );
        }

        return array('model_file' => $this->getUploadedFilesListBy(self::UPLOADED_FILE_MODEL, self::UPLOADED_FILE_MODEL_TYPE, true));
    }

    public function getReportUploadedFilesCount()
    {
        return array
        (
            self::UPLOADED_FILE_FINANCIAL_FILE_TYPE => $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_FINANCIAL_FILE_TYPE, true),
            self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE, true),
            self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => $this->getUploadedFilesListBy(self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE, true));
    }

    public function getLabel($label_def = "Сценарий")
    {
        $label = $this->isConcept() ? "Концепция" : "Макет";
        if ($this->getModelType()->getId() == 4) {
            $label = $label_def . " видеоролика";
        } else if ($this->getModelType()->getId() == 2) {
            $label = $label_def . " радиоролика";
        }

        return $label;
    }

    public function isModelScenario()
    {
        return $this->getModelType()->getId() == 4 || $this->getModelType()->getId() == 2;
    }

    /**
     * Reindex uploaded files by type in model
     */
    public function reindexFiles()
    {
        $file_types = array
        (
            AgreementModel::UPLOADED_FILE_MODEL_TYPE,
            AgreementModel::UPLOADED_FILE_SCENARIO_TYPE,
            AgreementModel::UPLOADED_FILE_RECORD_TYPE,
            AgreementModel::UPLOADED_FILE_FINANCIAL_FILE_TYPE,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_FILE_TYPE,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE
        );

        foreach ($file_types as $type) {
            $idx = 1;

            $records = AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?',
                array
                (
                    $this->getId(),
                    $type,
                )
            )
                ->orderBy('id ASC')
                ->execute();

            foreach ($records as $record) {
                $record->setFieldName($record->getField() . '_' . $idx++);
                $record->save();
            }
        }
    }

    public function changeStepsStates()
    {
        if ($this->isModelScenario()) {
            if ($this->getStep1() == "none") {
                $this->setStep1("wait");
            } else if ($this->getStep1() == "accepted") {
                $this->setStep2('wait');
            }

            $this->save();
        }
    }

    /**
     * Delete all model / report files by file types
     */
    public function removeUploadedFiles()
    {
        $files_types = array
        (
            AgreementModel::UPLOADED_FILE_MODEL_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_RECORD_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_SCENARIO_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => AgreementModelReport::ADDITIONAL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => AgreementModelReport::ADDITIONAL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_FINANCIAL_FILE_TYPE => AgreementModelReport::FINANCIAL_DOCS_FILE_PATH
        );

        foreach ($files_types as $key => $path) {
            $filesList = AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?', array($this->getId(), $key))->execute();

            foreach ($filesList as $file) {
                $filePath = sfConfig::get('app_uploads_path') . '/' . $path . '/' . $file->getFile();

                if (file_exists($filePath)) {
                    unlink($filePath);
                }

                $file->delete();
            }
        }
    }

    public function getFinancialDocsFile()
    {
        return AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?', array($this->getId(), self::UPLOADED_FILE_FINANCIAL_FILE_TYPE))->fetchOne();
    }

    /**
     * Delete Scenario / Record files
     * @param string $by_type
     */
    public function deleteFilesBySR($by_type)
    {
        /*if ($by_type) {
            $del_type = null;
            if ($by_type == self::BY_RECORD) {
                $del_type = self::UPLOADED_FILE_RECORD_TYPE;
            } else if ($by_type == self::BY_SCENARIO) {
                $del_type = self::UPLOADED_FILE_SCENARIO_TYPE;
            }

            $filesList = AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?', array($this->getId(), $del_type))->execute();
            foreach ($filesList as $file) {
                $filePath = sfConfig::get('app_uploads_path') . '/' . self::MODEL_FILE_PATH . '/' . $file->getFile();

                if (file_exists($filePath)) {
                    unlink($filePath);
                }

                $file->delete();
            }
        }*/
    }

    /**
     * Accept model if manager / designer statuses accepted
     */
    public function acceptModelWithMD($clear = false)
    {
        if ($this->getManagerStatus() != 'wait') {
            if ($this->getManagerStatus() == 'accepted' && $this->getDesignerStatus() == 'accepted') {
                if ($this->isModelScenario()) {
                    if ($this->getStep1() == 'accepted' && $this->getStep2() == 'accepted') {
                        $this->setStatus('accepted');
                    }
                } else {
                    $this->setStatus('accepted');
                }
            } else if ($this->getManagerStatus() == 'declined' || $this->getDesignerStatus() == 'declined') {
                $this->setStatus('declined');

                if ($this->isModelScenario()) {
                    if ($this->getStep1() == "accepted" && $this->getStep2() != "accepted") {
                        $this->setStep1('declined');
                        $this->setStep2('declined');
                    } else {
                        $this->setStep2('declined');
                    }
                }
            }
        } else if (!$this->isModelScenario()) {
            $this->setStatus('accepted');
        }

        if ($clear) {
            $this->setManagerStatus('wait');
            $this->setDesignerStatus('wait');
        }
    }

    public function changeStep1Statuses()
    {
        $this->setStatus('not_sent');

        $this->setStep1("accepted");
        $this->setStep2("wait");
    }

    public function changeStepsDeclineStatuses()
    {

    }

    /**
     * Decline model by step iif model is scenario / record type
     * @param $step
     */
    public function declineModelScenario($step)
    {
        if ($this->isModelScenario()) {
            if ($step === "first") {
                $this->deleteFilesBySR(AgreementModel::BY_SCENARIO);
                $this->deleteFilesBySR(AgreementModel::BY_RECORD);

                $this->setStep1("none");
                $this->setStep2("none");

            } else if ($step === "second") {
                $this->deleteFilesBySR(AgreementModel::BY_RECORD);

                $this->setStep2("none");
            } else {
                $this->setStep1("none");
                $this->setStep2("none");

                $this->setNoModelChanges(false);
            }
        }
    }

    /**
     * Get total filled places to upload files
     */
    public function getTotalFilledPlacesToUploadReportFiles()
    {
        $total = 0;
        foreach ($this->getValues() as $value) {
            $value_place = $value->getField()->isPlaceField() ? $value->getValue() : null;

            if (!is_null($value_place) && !empty($value_place)) {
                $total++;
            }
        }

        return $total;
    }

    public function isModelCompleted() {
        return $this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'accepted';
    }

    public function isModelBlocked() {
        return $this->getIsBlocked() && !$this->getAllowUseBlocked() ? true : false;
    }

    public function isCompleted() {
        return $this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'accepted';
    }

    /**
     * Calc model correct quarter by checking model status
     * @param null $by_date
     * @param null $by_created_date
     * @return float
     */
    public function getModelQuarterDate($by_date = null, $by_created_date = null) {
        $model_quarter_date = D::calcQuarterData(time());

        /*if ($by_created_date) {
            $model_quarter_date = D::calcQuarterData($this->getCreatedAt());
        }*/

        if ($this->isModelBlocked()) {
            return D::calcQuarterData($this->getCreatedAt());
        }

        if (!is_null($by_date)) {
            return $by_date;
        }

        if ($this->isModelCompleted()) {
            $model_quarter_date = Utils::getModelDateFromLogEntryWithYear($this->getId());
        }

        return $model_quarter_date;
    }

    /**
     * @param $by_type
     * @return array
     */
    public function makeListOfUploadedFilesByType($by_type)
    {
        $uploaded_files_list = $this->getModelUploadedFiles($by_type);

        $result_files = array();
        foreach ($uploaded_files_list as $uploaded_file) {
            $file_path = $filePath = sfConfig::get('app_uploads_path') . '/' . self::MODEL_FILE_PATH . '/' . $uploaded_file->getFileName();

            $result_files[] = array
            (
                'id' => $uploaded_file->getId(),
                'name' => $uploaded_file->getFile(),
                'size' => filesize($file_path),
                'path' => F::isImage($uploaded_file->getFile()) ? '/uploads/' . self::MODEL_FILE_PATH . '/' . $uploaded_file->getFile() : '',
            );
        }

        return $result_files;
    }

    /**
     * Get model total places count for report, when upload additional files
     * @return int
     */
    public function getModelTypePlacesCount()
    {
        $places_count = 0;

        $values_list = AgreementModelValueTable::getInstance()->createQuery('am_v')
            ->where('model_id = ?', $this->getId())
            ->execute();

        foreach ($values_list as $value_item) {
            $value = $value_item->getValue();
            if ($value_item->getField()->getHide() && !empty($value)) {
                $places_count++;
            }
        }

        return $places_count != 0 ? ++$places_count : 0;
    }

    public function getUploadedFilesSchemaByType()
    {
        $show_main_block = false;

        if ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'wait_manager_specialist' || $this->getStatus() == 'accepted') {
            $show_main_block = true;
        }

        if ($this->isModelScenario()) {
            $show_record_block = false;

            //Для загруженных файлов - сценариев
            if ($this->getStep1() == 'accepted') {
                $show_main_block = true;
            }

            //Для загруженных файлов - записей
            if (($this->getStep1() == 'accepted' || $this->getNoModelChanges()) && ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_manager_specialist' || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'accepted')) {
                $show_record_block = true;
            }

            $label_scenario = $this->getModelType()->getId() == 4 ? 'Сценарий видеоролика' : 'Сценарий радиоролика';
            $label_record = $this->getModelType()->getId() == 4 ? 'Запись видеоролика' : 'Запись радиоролика';

            //If model has category and agreement type by scenario / record get labels
            if ($this->isValidModelCategory() && $this->isModelScenario()) {
                $field_description = $this->getModelType()->getFieldDescription();
                $field_description = explode(";", $field_description);

                if (!empty($field_description)) {
                    $label_scenario = $field_description[0];
                    $label_record = $field_description[1];
                }
            }

            return array
            (
                self::UPLOADED_FILE_SCENARIO_TYPE => array
                (
                    'type' => self::UPLOADED_FILE_SCENARIO,
                    'file_type' => self::UPLOADED_FILE_SCENARIO_TYPE,
                    'show' => $show_main_block,
                    'label' => $label_scenario
                ),
                self::UPLOADED_FILE_RECORD_TYPE => array
                (
                    'type' => self::UPLOADED_FILE_RECORD,
                    'show' => $show_record_block,
                    'file_type' => self::UPLOADED_FILE_RECORD_TYPE,
                    'label' => $label_record
                )
            );
        }

        return array(self::UPLOADED_FILE_MODEL_TYPE => array('type' => self::UPLOADED_FILE_MODEL, 'show' => $show_main_block, 'label' => $this->isConcept() ? 'Концепция' : 'Макет'));
    }
}


