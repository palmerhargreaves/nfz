<?php

/**
 * Discussion
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Discussion extends BaseDiscussion
{
    const PAGER_NEW_MESSAGES = 'pager_new';
    const PAGER_READED_MESSAGES = 'pager_readed';
    const PAGER_MESSAGE_BY_MODELS = 'pager_models';
    const PAGER_MESSAGE_BY_FORM = 'pager_form';

    const MODELS_MESSAGES = 'models';

    /**
     * Returns unread messages
     *
     * @param User $user
     * @param boolean $mark_as_read
     * @return Doctrine_Collection
     */
    function getUnreadMessages(User $user, $mark_as_read = true, $return_query = false)
    {
        $last_read = $this->getLastRead($user);
        $query = $this->getUnreadMessagesQuery($last_read)->orderBy('m.id asc');

        $messages = $query->execute();
        if ($mark_as_read) {
            $this->markAsRead($messages, $last_read);
        }

        if ($return_query) {
            return $query;
        }

        return $messages;
    }

    function countUnreadMessages(User $user, $after = false)
    {
        return $this->getUnreadMessagesQuery($this->getLastRead($user), $after)->count();
    }

    function getLastMessages($limit, User $user, $mark_as_read = true)
    {
        $query = MessageTable::getInstance()
            ->createQuery()
            ->where('discussion_id=?', $this->getId())
            ->andWhereIn('private_user_id', array(0, $user->getId()))
            ->andWhere('msg_show = ?', true);

        $count = $query->count();
        if ($count > $limit)
            $query->offset($count - $limit)->limit($limit);

        $messages = $query->orderBy('id asc')->execute();
        if ($mark_as_read)
            $this->markAsRead($messages, $this->getLastRead($user));

        return $messages;
    }

    public function activeDisabledMessages($delete = false) {
        if ($delete) {
            MessageTable::getInstance()
                ->createQuery()
                ->delete()
                ->where('discussion_id=?', $this->getId())
                ->andWhere('msg_show = ?', 0)
                ->execute();
        } else {
            $messages = MessageTable::getInstance()
                ->createQuery()
                ->where('discussion_id=?', $this->getId())
                ->andWhere('msg_show = ?', 0)
                ->execute();

            foreach ($messages as $msg) {
                $msg->setMsgShow(true);
                $msg->save();
            }
        }
    }

    function getLastMessagesForDiscussion($limit = 0, $message_id = 0, $mark_as_read = false, User $user = null)
    {
        $query = MessageTable::getInstance()
            ->createQuery()
            ->where('discussion_id=?', $this->getId())
            ->andWhere('msg_show = ?', 1);
        //->andWhere('system = 0');

        if ($limit > 0)
            $query->limit($limit);

        $messages = $query->orderBy('id asc')->execute();

        if ($message_id != 0 && $mark_as_read) {
            $last_read = new DiscussionLastRead();
            $last_read->setUserId($user->getId());
            $last_read->setMessageId($message_id);
            $last_read->save();
        }

        return $messages;
    }

    function getLastMessagesFrom($start, User $user, $mark_as_read = true)
    {
        $query = MessageTable::getInstance()
            ->createQuery()
            ->where('discussion_id=? and id>=?', array($this->getId(), $start))
            ->andWhereIn('private_user_id', array(0, $user->getId()))
            ->andWhere('msg_show = ?', true);

        $messages = $query->orderBy('id asc')->execute();
        if ($mark_as_read)
            $this->markAsRead($messages, $this->getLastRead($user));

        return $messages;
    }

    /**
     * Returns previous messages
     *
     * @param int $limit
     * @param int $before id of message that will be after last one
     * @param User $user
     * @return Doctrine_Collection
     */
    function getPreviousMessages($limit, $before, User $user)
    {
        $query = MessageTable::getInstance()
            ->createQuery()
            ->where('discussion_id=? and id<?', array($this->getId(), $before))
            ->andWhereIn('private_user_id', array(0, $user->getId()))
            ->andWhere('msg_show = ?', true)
            ->orderBy('id asc');

        $count = $query->count();
        if ($count > $limit)
            $query->offset($count - $limit)->limit($limit);

        return $query->orderBy('id asc')->execute();
    }

    /**
     * Returns messages found by text
     *
     * @param string $text
     * @param User $user
     * @return Doctrine_Collection
     */
    function searchMessages($text, User $user)
    {
        return MessageTable::getInstance()
            ->createQuery()
            ->where('discussion_id=? and match(text) against (?)', array($this->getId(), $text))
            ->andWhereIn('private_user_id', array(0, $user->getId()))
            ->orderBy('id asc')
            ->execute();
    }

    /**
     * Returns online users that take part in this discussion
     *
     * @return Doctrine_Collection
     */
    function getOnlineUsersInOnlinePeriod()
    {
        return UserTable::getInstance()
            ->createQuery('u')
            ->innerJoin(
                'u.DiscussionOnline o WITH o.discussion_id=? and date_sub(?, interval ? second) <= o.updated_at',
                array($this->getId(), D::toDb(time(), true), sfConfig::get('app_online_period'))
            )
            ->execute();
    }

    function updateOnline(User $user)
    {
        $online = DiscussionOnlineTable::getInstance()
            ->createQuery()
            ->where('discussion_id=? and user_id=?', array($this->getId(), $user->getId()))
            ->fetchOne();

        if (!$online) {
            $online = new DiscussionOnline();
            $online->setArray(array(
                'discussion_id' => $this->getId(),
                'user_id' => $user->getId()
            ));
        } else {
            $online->state('DIRTY');
        }

        $online->save();
    }

    protected function markAsRead(Doctrine_Collection $messages, DiscussionLastRead $last_read)
    {
        $last_message = $messages->getLast();
        if ($last_message) {
            $last_read->setMessage($last_message);
            $last_read->save();
        }
    }

    /**
     * Returns last read for an user
     *
     * @param User $user
     * @return DiscussionLastRead
     */
    function getLastRead(User $user)
    {
        $last_read = DiscussionLastReadTable::getInstance()
            ->createQuery('lr')
            ->select('lr.*')
            ->innerJoin('lr.Message m WITH m.discussion_id=?', $this->getId())
            ->where('lr.user_id=?', $user->getId())
            //->andWhere('m.mark_as_read = ?', 1)
            ->fetchOne();

        if (!$last_read) {
            $last_read = new DiscussionLastRead();
            $last_read->setUser($user);
            $last_read->setMessageId(0);
        }

        return $last_read;
    }

    protected function getUnreadMessagesQuery(DiscussionLastRead $last_read, $after = false)
    {
        $query = MessageTable::getInstance()
            ->createQuery('m')
            ->where('m.discussion_id=? and id>?', array($this->getId(), $last_read->getMessageId()))
            ->andWhere('m.msg_show = ?', true)
            ->andWhereIn('private_user_id', array(0, $last_read->getUserId()));

        if ($after)
            $query->andWhere('m.created_at>=?', D::toDb($after, true));

        return $query;
    }

    /**
     * Returns active participants of this discussion
     *
     * @return Doctrine_Collection
     */
    function getActiveParticipants()
    {
        return UserTable::getInstance()
            ->createQuery('u')
            ->distinct()
            ->select('u.*')
            ->innerJoin('u.Messages m WITH m.discussion_id=?', $this->getId())
            ->where('u.active=?', true)
            ->execute();
    }

    public function getMessagesCount()
    {
        $result = MessageTable::getInstance()
            ->createQuery('m')
            ->select('*')
            ->where('m.discussion_id = ? and m.system = 0', $this->getId())
            ->execute();

        return count($result);
    }

    public function addNewMessage(sfWebRequest $request, User $user)
    {
        $message = new Message();

        $message->setUserId($user->getId());
        $message->setDiscussionId($request->getParameter('id'));
        $message->setText($request->getParameter('message'));

        $message->setUserName(sprintf('%s %s', $user->getName(), $user->getSurname()));
        $message->setCreatedAt(date('Y-m-d H:i:s'));

        $message->save();

        $markAsRead = $request->getParameter('markAsRead');

        if ($markAsRead == 1) {
            $lastRead = new DiscussionLastRead();

            $lastRead->setUser($user);
            $lastRead->setMessage($message);
        }

        return $message;
    }

    public function isLastMessageNew()
    {
        $result = MessageTable::getInstance()
            ->createQuery()
            ->select('*')
            ->where('discussion_id = ?', $this->getId())
            ->orderBy('id DESC')
            ->limit(1)
            ->fetchOne();

        if ($result)
            return $result->getUser()->getGroup()->getId() == 1 ? false : true;

        return true;
    }

    public function getLastMessageUser()
    {
        return MessageTable::getInstance()
            ->createQuery()
            ->select('*')
            ->where('discussion_id = ?', $this->getId())
            ->orderBy('id DESC')
            ->limit(1)
            ->fetchOne();
    }

    /**
     * @param User $user
     * @param $parent
     * @param $messages_type
     * @param $start_from
     */
    public static function getMessagesListByParentAndType(User $user, $parent, $messages_type, $start_from = 0) {
        if ($parent == Discussion::PAGER_NEW_MESSAGES) {
            $query = DealerDiscussionTable::getInstance()->getUnreadMessagesByType($user, $messages_type, $start_from);
        } else if($parent == Discussion::PAGER_READED_MESSAGES) {
            $query = DealerDiscussionTable::getInstance()->getReadedMessagesByType($user, $messages_type, $start_from);
        }

        return $query->execute();
    }
}