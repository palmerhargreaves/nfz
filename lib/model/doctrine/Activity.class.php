<?php

/**
 * Activity
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Activity extends BaseActivity
{
    const CONCEPT_MODEL_TYPE_ID = 10;

    const ACTIVITY_STATISTIC_TYPE_SIMPLE = 'simple';
    const ACTIVITY_STATISTIC_TYPE_EXTENDED = 'extended';

    function markAsViewed(User $user)
    {
        if ($this->isViewed($user))
            return;

        $view = new ActivityUserView();
        $view->setActivity($this);
        $view->setUser($user);
        $view->save();
    }

    function isViewed(User $user)
    {
        return ActivityUserViewTable::getInstance()
            ->createQuery()
            ->where('activity_id=? and user_id=?', array($this->getId(), $user->getId()))
            ->count() > 0;
    }

    function acceptForDealer(Dealer $dealer, $accept_date)
    {
        $accept = AcceptedDealerActivityTable::getInstance()
            ->createQuery()
            ->where('activity_id=? and dealer_id=?', array($this->getId(), $dealer->getId()))
            ->fetchOne();

        if (!$accept) {
            $accept = new AcceptedDealerActivity();
            $accept->setActivityId($this->getId());
            $accept->setDealerId($dealer->getId());
        }

        $accept->setAcceptDate(D::toDb($accept_date, true));
        $accept->save();
    }

    function declineForDealer(Dealer $dealer)
    {
        AcceptedDealerActivityTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('activity_id=? and dealer_id=?', array($this->getId(), $dealer->getId()))
            ->execute();
    }

    function isAcceptedForDealer(Dealer $dealer)
    {
        return AcceptedDealerActivityTable::getInstance()
            ->createQuery()
            ->where('activity_id=? and dealer_id=?', array($this->getId(), $dealer->getId()))
            ->count() > 0;
    }

    function isAllTasksDone(Dealer $dealer)
    {
        $result = Doctrine_Query::create()
            ->select('count(t.id) tasks, count(r.id) done')
            ->from('ActivityTask t')
            ->leftJoin('t.Results r WITH r.dealer_id=? and r.done=?', array($dealer->getId(), true))
            ->where('t.activity_id=?', $this->getId())
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        return $result['tasks'] == 0 ? false : $result['tasks'] == $result['done'];
    }

    /**
     * Returns a module descriptor
     *
     * @param ActivityModule $module
     * @param User $user
     * @return ActivityModuleDescriptor
     */
    function getModuleDescriptor(ActivityModule $module, User $user)
    {
        return ActivityModuleDescriptorFactory::descriptor($module, $this, $user);
    }

    /**
     * Returns an array of module descriptors attached to this activity
     *
     * @param User $user
     * @return array
     */
    function getAllModuleDescriptors(User $user)
    {
        $descriptors = array();

        foreach ($this->getModules() as $module)
            $descriptors[] = $this->getModuleDescriptor($module, $user);

        return $descriptors;
    }

    /**
     * Returns an activity status
     *
     * @param User $user
     */
    function getStatus(User $user, $filterByYear = null)
    {
        try {
            $dealer = DealerUserTable::getInstance()->createQuery()->select('dealer_id')->where('user_id = ?', $user->getId())->fetchOne();

            if ($dealer) {
                $dealer = DealerTable::getInstance()->find($dealer->getDealerId());
                if (!$dealer) {
                    return ActivityModuleDescriptor::STATUS_NONE;
                }

                $res = AgreementModelTable::getInstance()->createQuery()->where('activity_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))->execute();
                if ($this->getIsOwn() && count($res) > 0) {
                    return ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                } else if ($this->getIsOwn()) {
                    return ActivityModuleDescriptor::STATUS_NONE;
                }

                if (ActivitiesStatusTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ?', array($dealer->getId(), $this->getId()))->count() > 0) {
                    return ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                }

                if (!$this->isConceptComplete($dealer) && $res->count() > 0) {
                    return ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                }

                $res = AcceptedDealerActivityTable::getInstance()->createQuery()->where('activity_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))->execute();
                //if (!$this->getAllowExtendedStatistic() && $res->count() > 0 && $this->isActivityStatisticComplete($user)) {
                if (!$this->getAllowExtendedStatistic() && $res->count() > 0 && $this->checkStatisticComplete($dealer->getId(), self::ACTIVITY_STATISTIC_TYPE_SIMPLE, false)) {
                    return ActivityModuleDescriptor::STATUS_ACCEPTED;
                }

                $quarter = D::getQuarter(D::calcQuarterData(date('d-m-Y')));
                $year = is_null($filterByYear) ? D::getYear(date('d-m-Y')) : $filterByYear;

                $fields = ActivityFieldsValuesTable::getInstance()
                    ->createQuery('fv')
                    ->select()
                    ->leftJoin('fv.ActivityFields af')
                    ->where('dealer_id = ?', $dealer->getId())
                    ->andWhere('af.activity_id = ?', $this->getId())
                    ->count();

                if ($this->getAllowExtendedStatistic() && ActivityExtendedStatisticFieldsTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->count() > 0) {

                    $activityStatisticStatus = $this->isActivityStatisticComplete($user, D::calcQuarterData(date('d-m-Y')), true);
                    $activityModelsCount = AgreementModelTable::getInstance()
                        ->createQuery()
                        ->where('activity_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))
                        ->andWhere('year(created_at) = ? and quarter(created_at) = ?', array($year, $quarter))
                        ->andWhere('model_type_id != ?', self::CONCEPT_MODEL_TYPE_ID)
                        ->count();

                    if ($activityModelsCount > 0 && !$activityStatisticStatus) {
                        return ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                    } else if ($activityStatisticStatus) {
                        $activityModelsComplete = AgreementModelTable::getInstance()
                            ->createQuery('am')
                            ->select('id')
                            ->leftJoin('am.Report r')
                            ->where('am.activity_id = ? and am.dealer_id = ?', array($this->getId(), $dealer->getId()))
                            ->andWhere('year(r.updated_at) = ? and quarter(r.updated_at) = ?', array($year, $quarter))
                            ->andWhere('am.status = ? and r.status = ?', array('accepted', 'accepted'))
                            ->andWhere('model_type_id != ?', self::CONCEPT_MODEL_TYPE_ID)
                            ->orderBy('am.id ASC')
                            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

                        if (count($activityModelsComplete) > 0) {
                            $complete = false;
                            foreach ($activityModelsComplete as $model) {
                                $data = LogEntryTable::getInstance()
                                    ->createQuery()
                                    ->select('created_at')
                                    ->where('object_id = ?', $model['id'])
                                    ->andWhere('private_user_id = ?', 0)
                                    ->andWhere('icon = ?', 'clip')
                                    ->orderBy('id DESC')
                                    ->limit(1)
                                    ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                                if ($data) {
                                    if ($year == D::getYear(date('Y-m-d', D::calcQuarterData($data['created_at'])))) {
                                        $complete = true;
                                    }
                                }
                            }

                            return $complete ? ActivityModuleDescriptor::STATUS_ACCEPTED : ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                        }

                        return $activityModelsCount > 0 ? ActivityModuleDescriptor::STATUS_WAIT_DEALER : ActivityModuleDescriptor::STATUS_NONE;
                    }
                } else if ($fields > 0) {
                    $models = AgreementModelTable::getInstance()
                        ->createQuery()
                        ->where('activity_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))
                        ->andWhere('year(created_at) = ?', array($year))
                        ->execute();
                    if (count($models) > 0) {
                        $createdModelsInQ = 0;

                        foreach ($models as $model) {
                            $nDate = D::getQuarter($model->getCalcDate());

                            if ($quarter == $nDate) {
                                $createdModelsInQ++;
                            }
                        }

                        if ($createdModelsInQ > 0) {
                            return $this->checkStatisticComplete($dealer->getId(), self::ACTIVITY_STATISTIC_TYPE_SIMPLE, false) ? ActivityModuleDescriptor::STATUS_ACCEPTED : ActivityModuleDescriptor::STATUS_WAIT_DEALER;
                        } else {
                            return ActivityModuleDescriptor::STATUS_NONE;
                        }
                    } else {
                        return ActivityModuleDescriptor::STATUS_NONE;
                    }
                }
            }
        } catch (Exception $ex) {
            $dealer = $user;
        }


        $last_status = ActivityModuleDescriptor::STATUS_NONE;
        foreach ($this->getAllModuleDescriptors($user) as $descriptor) {
            $status = $descriptor->getStatus();

            if ($status == ActivityModuleDescriptor::STATUS_WAIT_DEALER)
                return $status;

            if ($status > $last_status)
                $last_status = $status;
        }

        return $last_status;
    }


    /**
     * @param $user
     * @param null $date
     * @param bool|false $forTask
     * @param null $by_year
     * @param null $by_quarter
     * @param array $params
     * @return bool
     * @internal param bool|false $ss
     */
    function isActivityStatisticComplete($user, $date = null, $forTask = false, $by_year = null, $by_quarter = null, $params = array())
    {
        if ($user instanceof User) {
            try {
                $dealer = DealerUserTable::getInstance()->createQuery()->select('dealer_id')->where('user_id = ?', $user->getId())->fetchOne();

                if ($dealer) {
                    $dealer = DealerTable::getInstance()->find($dealer->getDealerId());
                }
            } catch (Exception $ex) {
                $dealer = $user;
            }
        } else if (is_numeric($user)) {
            $dealer = DealerTable::getInstance()->find($user);
        } else {
            $dealer = $user;
        }

        if ($dealer) {
            $type = self::ACTIVITY_STATISTIC_TYPE_SIMPLE;
            if ($this->getAllowExtendedStatistic()) {
                $type = self::ACTIVITY_STATISTIC_TYPE_EXTENDED;
            } else {
                $fields = $this->getActivityField();
                if (count($fields) == 0) {
                    return ( !$forTask ? true : false );
                }
            }

            $query = ActivityDealerStaticticStatusTable::getInstance()
                ->createQuery()
                ->select('complete')
                ->where('dealer_id = ? and activity_id = ? and stat_type = ?',
                    array(
                        is_array($dealer) ? $dealer[ 'id' ] : $dealer->getId(),
                        $this->getId(),
                        $type
                    )
                )
                ->orderBy('id ASC');

            //Проверка на выполнение активности раз в году
            //Проверяем на дополнительный параметр
            if (!empty($params)) {
                //Принудительная проверка выполнения активности за квартал
                if (isset($params[ 'check_by_quarter' ]) && !is_null($by_quarter)) {
                    $query->andWhere('ignore_q' . $by_quarter . '_statistic = ?', 0);
                    $query->andWhere('q' . $by_quarter . '= ? ', $by_quarter);
                }
            } else {
                //Если активность разрешено выполнять несколько раз делаем проврку если необходимо на заполненную статустику в квартале
                if (!$this->isLimitRun() && !is_null($by_quarter)) {
                    $query->andWhere('ignore_q' . $by_quarter . '_statistic = ?', 0);
                    $query->andWhere('q' . $by_quarter . '= ? ', $by_quarter);
                }
                /*//Если активность разрешено выполнять только раз в году, при необходимости делаем проверку на заполнение статистики
                else if(!is_null($by_quarter)) {
                    $query->andWhere('ignore_q' . $by_quarter . '_statistic = ?', 0);
                    $query->andWhere('q' . $by_quarter . '= ? ', $by_quarter);
                }*/
            }

            if (!is_null($by_year)) {
                $query->andWhere('year = ?', $by_year);
            }

            //Делаем проход по всех сохраненным результатам выполнения статистики
            //Если выполнена хоть одна, учитывваем это
            $isComplete = false;
            $result_of_statistic_fill = $query->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
            foreach ($result_of_statistic_fill as $res) {
                $isComplete = !$isComplete ? ($res ? $res['complete'] : false) : $isComplete;
            }

            if ($isComplete) {
                return true;
            }

            if (!empty($date)) {
                $quarter = !is_null($by_quarter) ? $by_quarter : D::getQuarter(D::calcQuarterData($date));
                $year = !is_null($by_year) ? $by_year : D::getYear($date);

                $periods = $this->getActivityStatisticPeriodsInfo();
                if (( empty($periods) || !isset($periods[ $year ]) ) || !in_array($quarter, $periods[ $year ])) {
                    return true;
                }

                if (ActivityDealerStaticticStatusTable::getInstance()
                    ->createQuery()
                    ->where('activity_id = ? and dealer_id = ? and year(created_at) = ? and stat_type = ? and q' . $quarter . ' != ? and ignore_q' . $quarter . '_statistic = ?',
                        array
                        (
                            $this->getId(),
                            is_array($dealer) ? $dealer[ 'id' ] : $dealer->getId(),
                            $year,
                            $type,
                            0,
                            0
                        ))->count()) {
                    $isComplete = true;
                }

                if (isset($periods[ $year ]) && in_array($quarter, $periods[ $year ]) && $isComplete) {
                    return true;
                }

                return false;
            }

            if ($isComplete && $forTask) {
                return true;
            }
            return false;
        }

        return true;
    }

    function checkForStatisticsFill($dealer)
    {
        $fields = $this->getActivityField();
        if (count($fields) == 0)
            return true;

        $complete = false;
        $vals = array();
        foreach ($fields as $field) {
            $fieldVal = ActivityFieldsValuesTable::getInstance()->createQuery()->select()->where('dealer_id = ? and field_id = ?', array($dealer->getId(), $field->getId()))->fetchOne();

            if (!$fieldVal) {
                continue;
            }

            if ($fieldVal->getActivityFields()->getActivityId() == $this->getId()) {
                if (trim($field->getType()) != "date") {
                    if ($fieldVal->getVal() == 0)
                        $vals[$fieldVal->getId()] = $fieldVal->getId();
                    else
                        $complete = true;
                }
            }
        }

        return $complete;
    }

    /**
     * @param $dealer
     * @param string $type
     * @return array|bool
     */
    function checkForStatisticsFillTask($dealer, $type = self::ACTIVITY_STATISTIC_TYPE_SIMPLE)
    {
        if ($type == self::ACTIVITY_STATISTIC_TYPE_SIMPLE) {
            return $this->checkForSimpleStatisticsFill($dealer);
        } else if (!$this->getAllowExtendedStatistic()) {
            return true;
        }

        return $this->checkForExtendedStatisticsFill($dealer);
    }

    /**
     * @param $dealer
     * @return array|bool
     */
    private function checkForSimpleStatisticsFill($dealer)
    {
        $fields = $this->getActivityField();
        if (count($fields) == 0) {
            return true;
        }

        $periods = $this->getActivityStatisticPeriodsInfo();

        $complete = array();
        $q = 0;
        $quarters = array();
        foreach ($fields as $field) {
            $fieldVals = ActivityFieldsValuesTable::getInstance()
                ->createQuery()
                ->select()
                ->where('dealer_id = ? and field_id = ?',
                    array(
                        $dealer['id'],
                        $field->getId()
                    )
                )
                ->orderBy('id DESC')
                ->execute();

            foreach ($fieldVals as $fieldVal) {
                $q = $fieldVal->getQ();

                $inPeriods = false;
                foreach ($periods as $year => $period) {
                    if (in_array($q, $period)) {
                        $inPeriods = true;
                    }
                }

                if (!$inPeriods) {
                    continue;
                }

                if (!in_array($q, $quarters)) {
                    $quarters[] = $q;
                }

                if ($fieldVal->getActivityFields()->getActivityId() == $this->getId()) {
                    if (trim($field->getType()) != "date" && $fieldVal->getVal() != 0) {
                        $complete[$this->getId()][$q] = array(
                            'q' => $q,
                            'complete' => true,
                            'dealer' => $dealer['id']
                        );
                    } else if ($field->getReq()) {
                        $complete[$this->getId()][$q] = array(
                            'q' => $q,
                            'complete' => false,
                            'dealer' => $dealer['id'],
                        );
                    }
                }
            }
        }

        if ($dealer['id'] == 251 && $this->getId() == 79) {
            //vaR_dump($complete);
        }

        return array('status' => $complete, 'q' => $q);
    }

    /**
     * @param $dealer
     * @return array
     */
    function checkForExtendedStatisticsFill($dealer)
    {
        $result = array();
        $fields = ActivityExtendedStatisticFieldsTable::getInstance()->createQuery()->select('id, value_type, required')->where('activity_id = ? and value_type = ?', array($this->getId(), 'dig'))->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        foreach ($fields as $field) {
            $fieldsVal = ActivityExtendedStatisticFieldsDataTable::getInstance()
                ->createQuery()
                ->select('value, concept_id')
                ->where('dealer_id = ? and field_id = ?',
                    array(
                        $dealer['id'],
                        $field['id']
                    )
                )
                ->andWhere('concept_id != ?', 0)
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

            foreach ($fieldsVal as $fieldVal) {
                $val = $fieldVal['value'];

                if (!array_key_exists($fieldVal['concept_id'], $result)) {
                    $result[$fieldVal['concept_id']] = true;
                }

                if ($field['required'] == 1 && empty($val)) {
                    $result[$fieldVal['concept_id']] = false;
                }
            }
        }

        return $result;
    }

    public function checkForSimpleStatisticComplete($dealerId, $byYear = null, $quarter = null)
    {
        return $this->checkStatisticComplete($dealerId, self::ACTIVITY_STATISTIC_TYPE_SIMPLE, $byYear, $quarter);
    }

    public function checkForStatisticComplete($dealerId, $byYear = null, $quarter = null)
    {
        return $this->checkStatisticComplete($dealerId, self::ACTIVITY_STATISTIC_TYPE_EXTENDED, $byYear, $quarter);
    }

    /**
     * Checking for complete statistic (simple | extended - like Service Clinic)
     * @param $dealerId
     * @param $type
     * @param bool $checkByYear
     * @return bool
     */
    public function checkStatisticComplete($dealerId, $type, $by_year = null, $current_q = null)
    {
        if (!is_null($by_year)) {
            $currentYear = $by_year;
        } else {
            if (!$this->isManyYearsActivity()) {
                $currentYear = D::getYear(D::calcQuarterData($this->getStartDate()));
            } else {
                $currentYear = D::getYear(D::calcQuarterData(date('Y-m-d')));
            }
        }

        $currentQuarter = D::getQuarter(D::calcQuarterData(date('d-m-Y')));
        if (!is_null($current_q)) {
            $currentQuarter = $current_q;
        }

        $periods = $this->getActivityStatisticPeriodsInfo();
        if (!$this->getFinished()) {
            $notInQPeriods = true;
            foreach ($periods as $year => $period) {
                if ($currentYear == $year && in_array($currentQuarter, $period)) {
                    $notInQPeriods = false;
                }
            }

            if ($notInQPeriods) {
                return true;
            }
        }

        $query = ActivityDealerStaticticStatusTable::getInstance()
            ->createQuery()
            ->where('dealer_id = ? and activity_id = ? and stat_type = ?',
                array
                (
                    $dealerId,
                    $this->getId(),
                    $type
                )
            );

        $query->andWhere('year = ?', array($currentYear));
        if (!$this->getFinished()) {
            return $this->checkStatisticCompleteByPeriodWithSimpleStats($query, $dealerId, $periods, $currentYear, $currentQuarter);
        } else {
            return $this->checkStatisticCompleteByPeriod($query, $periods, $currentYear);
        }

        return false;
    }

    /**
     * Check stats complete by quarters periods
     * @param $query
     * @param $periods
     * @return bool
     */
    private function checkStatisticCompleteByPeriod($query, $periods)
    {
        $totalComplete = 0;
        $totalQs = 0;

        foreach ($periods as $year => $period) {
            foreach ($period as $pItem) {
                $query->andWhere('q' . $pItem . ' != ?', 0);
                $res = $query->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                if ($res && count($res) > 0) {
                    $totalComplete++;
                }

                $totalQs++;
            }
        }

        if ($totalComplete == count($periods)) {
            return true;
        }

        return false;
    }

    /**
     * Check stats complete by filled values, grouped by quarter
     * @param $query
     * @param $dealerId
     * @return bool
     */
    private function checkStatisticCompleteByPeriodWithSimpleStats($query, $dealerId, $periods = null, $by_year = null, $by_quarter = null)
    {
        $totalComplete = 0;

        $fields = ActivityFieldsTable::getInstance()
            ->createQuery('af')
            ->select('af.activity_id, f.q, f.dealer_id fDealer')
            ->leftJoin('af.Field f')
            ->where('af.activity_id = ?', $this->getId())
            ->andWhere('f.dealer_id = ?', $dealerId)
            ->andWhere('af.type != ?', array('date'))
            ->groupBy('f.q')
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $quarters = array();

        /*If quartet is not null add to main quarters list for checking data by this quaters*/
        if (!is_null($by_quarter)) {
            $quarters[] = $by_quarter;
        }

        foreach ($fields as $key => $field) {
            foreach ($field['Field'] as $fKey => $fData) {
                $field_quarter = intval($fData['q']);
                if ($field_quarter == 0) {
                    continue;
                }

                /*If checked quarter is null fill array by field quarter*/
                if (is_null($by_quarter) && !in_array($field_quarter, $quarters)) {
                    $quarters[] = $field_quarter;
                }

                if (in_array($field_quarter, $quarters)) {
                    if (!is_null($periods)) {
                        foreach ($periods as $year => $period) {
                            /*foreach ($period as $q) {
                                $query->andWhere('q' . $q . ' != ?', 0);
                            }*/
                            if (in_array($field_quarter, $period)) {
                                $query->andWhere('q' . $field_quarter . ' != ?', 0);
                            }
                        }
                    } else {
                        $query->andWhere('q' . $field_quarter . ' != ?', 0);
                    }

                    $res = $query->fetchOne();
                    if ($res && count($res) > 0 && !$res->getIgnoreStatistic()) {
                        $totalComplete++;
                    }
                }
            }
        }

        return $totalComplete > 0 ? $totalComplete == count($quarters) : false;
    }

    function getActivityStatisticPeriodsInfo()
    {
        $result = array();
        $items = ActivityStatisticPeriodsTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->execute();

        foreach ($items as $item) {
            $year = $item->getYear();

            if ($year != 0) {
                $result[$item->getYear()] = explode(':', $item->getQuarters());
            }
        }

        return $result;
    }

    function getActivityQuartals()
    {
        $result = array();

        foreach (ActivityQuartersTable::getInstance()->createQuery()->select()->where('activity_id = ?', $this->getId())->execute() as $item) {
            $result[] = $item->getQuarterId();
        }

        return $result;
    }

    function callWithModule(Closure $callback, User $user)
    {
        foreach ($this->getModules() as $module)
            $callback(ActivityModuleDescriptorFactory::descriptor($module, $this, $user));
    }

    function callWithActivityStatisticQuarters(Closure $callback, User $user)
    {
        $result = new stdClass();
        $result->totalCompleteModels = 0;
        $result->quarters = null;
        $result->totalQuarters = 0;

        $dealer = null;

        $userDealer = $user->getDealerUsers()->getFirst();
        if ($userDealer) {
            $dealer = DealerTable::getInstance()->createQuery('d')->where('id = ?', $userDealer->getDealerId())->fetchOne();
        }

        if (!$dealer) {
            return $result;
        }

        $models = AgreementModelTable::getInstance()
            ->createQuery('am')
            ->select('am.id as mId, am.updated_at as amUpdatedAt, amr.updated_at as amrUpdatedAt, am.status as amStatus, amr.status as amrStatus')
            ->leftJoin('am.Report amr')
            ->where('activity_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $activityStatisticPeriods = $this->getActivityStatisticPeriodsInfo();

        $quarters = array();
        foreach ($models as $model) {
            $data = LogEntryTable::getInstance()
                ->createQuery()
                ->select('created_at')
                ->where('object_id = ?', $model['mId'])
                ->andWhere('private_user_id = ?', 0)
                ->andWhere('icon = ?', 'clip')
                ->orderBy('id DESC')
                ->limit(1)
                ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

            $date = null;
            if (!empty($data)) {
                $field = 'created_at';

                $year = intval(D::getYear(D::calcQuarterData($data[$field])));
                $q = intval(D::getQuarter(D::calcQuarterData($data[$field])));

            } else {
                $field = 'amUpdatedAt';
                $year = intval(D::calcQuarterData(D::getYear($model[$field])));
                $q = intval(D::getQuarter(D::calcQuarterData($model[$field])));
            }

            if (isset($activityStatisticPeriods[$year]) && !in_array($q, $activityStatisticPeriods[$year])) {
                continue;
            }

            if ($model['amStatus'] == 'accepted' && $model['amrStatus'] == 'accepted') {
                $result->totalCompleteModels++;
            }

            if (!array_key_exists($q, $quarters)) {
                $result->totalQuarters++;
            }

            $quarters[$q][] = $model;
        }


        ksort($quarters);
        $result->quarters = $quarters;
        $result->dealerId = $dealer->getId();

        $callback($result);
    }

    function updateDealersList($dealers)
    {
        ActivityDealerTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('activity_id = ?', array($this->getId()))
            ->execute();

        $this->link('Dealers', is_array($dealers) ? array_values($dealers) : $dealers);
    }

    function updateQuartersList($quarters)
    {
        ActivityQuartersTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('activity_id = ?', array($this->getId()))
            ->execute();

        if (!is_array($quarters))
            $quarters[] = $quarters;

        foreach (array_values($quarters) as $val) {
            $item = new ActivityQuarters();

            $item->setActivityId($this->getId());
            $item->setQuarterId($val);
            $item->save();
        }

    }

    function getDealersList()
    {
        if (!is_null($this->getId())) {
            $result = ActivityDealerTable::getInstance()
                ->createQuery('r')
                ->select('r.dealer_id')
                ->where('r.activity_id = ?', array($this->getId()))
                ->execute();

            $res = array();
            foreach ($result as $r)
                $res[] = $r->getDealerId();

            return $res;
        }

        return array();
    }

    function getQuartersList()
    {
        if (!is_null($this->getId())) {
            $result = ActivityQuartersTable::getInstance()
                ->createQuery('r')
                ->select('r.quarter_id')
                ->where('r.activity_id = ?', array($this->getId()))
                ->execute();
            $res = array();
            foreach ($result as $r)
                $res[] = $r->getQuarterId();

            return $res;
        }

        return array();
    }

    function isActiveForUser(User $user)
    {
        if ($user->isSpecialist()) return true;
        if ($user->isAdmin()) return true;

        if (ActivityDealerTable::getInstance()
                ->createQuery()
                ->where('activity_id = ?', array($this->getId()))
                ->count() == 0
        ) {
            return true;
        }

        if ($this->getAllowToAllDealers())
            return true;

        if (!$user->getDealer())
            return false;

        return ActivityDealerTable::getInstance()
            ->createQuery()
            ->where('activity_id = ? AND dealer_id = ?', array($this->getId(), $user->getDealer()->getId()))
            ->count() > 0;
    }

    function isLimitRun()
    {
        return $this->is_limit_run == 1 ? true : false;
    }

    function isEnd()
    {
        $today = strtotime(date('Y-m-d'));
        $endDate = strtotime($this->getEndDate());

        if ($today > $endDate)
            return true;

        return false;
    }

    function getInfoData()
    {
        return ActivityInfoFieldsDataTable::getInstance()
            ->createQuery()
            ->where('activity_id = ?', $this->getId())
            ->execute();
    }

    function hasInfoFieldsData()
    {
        return ActivityInfoFieldsDataTable::getInstance()
            ->createQuery()
            ->where('activity_id = ?', $this->getId())
            ->count() > 0 ? true : false;
    }

    function getFields()
    {
        $result = array();
        $fields = ActivityInfoFieldsTable::getInstance()
            ->createQuery()
            ->select()
            ->orderBy('id ASC')
            ->execute();

        foreach ($fields as $field) {
            if ($field->hasData($this->getId()))
                $result[] = $field;
        }

        return $result;
    }

    function getActivityStatisticPeriods()
    {
        return ActivityStatisticPeriodsTable::getInstance()
            ->createQuery()
            ->where('activity_id = ?', $this->getId())
            ->orderBy('year ASC')
            ->execute();
    }

    function isConceptComplete(Dealer $dealer)
    {
        if ($this->getIsConceptComplete()) {
            $concept = AgreementModelTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ? and model_type_id = ?', array($dealer->getId(), $this->getId(), self::CONCEPT_MODEL_TYPE_ID))->fetchOne();

            if ($concept && $concept->getStatus() == 'accepted' && $concept->getReport()->getStatus() == 'accepted') {
                return true;
            }

            return false;
        }

        return true;
    }

    function getExtendedActivityFieldsCount()
    {
        return ActivityExtendedStatisticFieldsTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->count();
    }

    /**
     * �������� �� ��������� �������� �����������
     * ���� ���� �������� �������, ������� ���������� ������ ���� ������ � ������ ���� �� ��������� ����������
     * @param User $user
     * @return bool
     */
    function checkForCertificateEnd(User $user)
    {
        if (!$user->getDealer()) {
            return false;
        }

        $modelDates = AgreementModelDatesTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ?', array($user->getDealer()->getId(), $this->getId()))->fetchOne();
        if ($modelDates) {
            $dates = explode('/', $modelDates->getDateOf());
            if (count($dates) > 1) {
                $dateEnd = strtotime($dates[1]);
            } else {
                $dateEnd = strtotime($modelDates->getDateOf());
            }

            $today = strtotime(date('Y-m-d'));
            if ($dateEnd < $today) {
                return true;
            }
        } else {
            $modelUserSett = AgreementModelUserSettingsTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ?', array($user->getDealer()->getId(), $this->getId()))->fetchOne();
            if ($modelUserSett) {
                if ($modelUserSett->getIsBlocked()) {
                    return false;
                }

                $today = strtotime(date('Y-m-d'));
                $certificateEnd = strtotime($modelUserSett->getCertificateEnd());

                if ($today >= $certificateEnd) {
                    $modelUserSett->setIsBlocked(true);
                    $modelUserSett->save();

                    return false;
                }

                return true;
            }
        }

        return false;
    }

    function haveModelsWithCertificates(User $user)
    {
        if (!$user->getDealer())
            return false;

        if (AgreementModelDatesTable::getInstance()
                ->createQuery()
                ->where('activity_id = ? and dealer_id = ?',
                    array(
                        $this->getId(),
                        $user->getDealer()->getId()
                    )
                )
                ->count() > 0
        ) {
            return false;
        }

        return true;
    }

    public function getDealersStatsCount()
    {
        $field = ActivityFieldsTable::getInstance()
            ->createQuery()
            ->where('activity_id = ?', $this->getId())
            ->orderBy('id ASC')
            ->fetchOne();
        if ($field) {
            return ActivityFieldsValuesTable::getInstance()
                ->createQuery()
                ->where('field_id = ?', $field->getId())
                ->groupBy('dealer_id')
                ->count();
        }

        return null;
    }

    public function isAlwaysOpen(User $user)
    {
        if (!$user->getDealer())
            return false;

        $setting = ActivityDealerStaticticStatusTable::getInstance()
            ->createQuery()
            ->where('dealer_id = ? and activity_id = ?', array($user->getDealer()->getId(), $this->getId()))
            ->fetchOne();
        if ($setting) {
            return $setting->getAlwaysOpen() ? true : false;
        }

        return false;
    }

    public function checkCompleteStatsByQAndModel($activityId, $dealerId, $q, $model)
    {
        if (ActivityDealerStaticticStatusTable::getInstance()
                ->createQuery()
                ->where('activity_id = ? and dealer_id = ? and q' . $q . ' = ?',
                    array
                    (
                        $activityId,
                        $dealerId,
                        $q,
                    )
                )
                ->count() > 0
        ) {
            return true;
        }

        return false;
    }

    public function getModelsList($user, $sql_sort, $by_quarter = null)
    {
        $result = array();

        $by_quarter = intval($by_quarter);
        $quartersModels = new ActivityQuartersModelsAndStatistics($user->getAuthUser(), $this);

        $qData = $quartersModels->getData();
        $qList = array();
        foreach ($qData as $q => $qItem) {
            $qList = array_keys($qItem);
        }

        $currentQ = D::getQuarter(D::calcQuarterData(time()));
        if (!in_array($currentQ, $qList) && !empty($qList)) {
            $currentQ = max($qList);
        }

        $dealer = $user->getAuthUser()->getDealer();
        if (!$dealer) {
            return array();
        }

        $models = AgreementModelTable::getInstance()
            ->createQuery('m')
            ->innerJoin('m.ModelType mt WITH mt.concept=?', 0)
            ->leftJoin('m.Report r')
            ->leftJoin('m.Discussion d')
            ->where(
                'm.activity_id=? and m.dealer_id=?', array(
                    $this->getId(),
                    $user->getAuthUser()->getDealer()->getId()
                )
            )
            ->orderBy($sql_sort)
            ->execute();

        foreach ($models as $model) {
            if ($model->isModelCompleted()) {
                $date = Utils::getModelDateFromLogEntryWithYear($model->getId());
            } else {
                $date = D::calcQuarterData($model->getCreatedAt());
            }

            $modelQuarter = D::getQuarter($date);
            if (!empty($by_quarter)) {
                /*Если текущий квартал не равен кварталу фильтра, выводим только заявки выполненный по кварталу фильтра или заблокированные */
                if ($currentQ != $by_quarter) {
                    if ($by_quarter == $modelQuarter && ($model->isModelCompleted() || $model->isModelBlocked())) {
                        $result['models'][] = $model;
                    } else if ($by_quarter == $modelQuarter) {
                        $result['models'][] = $model;
                    }
                } /*Проверка на текущий квартал и если заявка не выполнена */
                else if ($by_quarter == $modelQuarter || (!$model->isModelCompleted() && !$model->isModelBlocked())) {
                    $result['models'][] = $model;
                }
            } else {
                $result['models'][] = $model;
            }
        }

        return $result;
    }

    public function isManyYearsActivity()
    {
        $startYear = D::getYear($this->getStartDate());
        $endYear = D::getYear($this->getEndDate());

        return $startYear != $endYear ? true : false;
    }

    public function isManyQuartersActivity()
    {
        $startDate = new DateTime($this->getStartDate());
        $endDate = new DateTime($this->getEndDate());

        $diff = $startDate->diff($endDate);

        return $diff->format('%m') > 1 ? true : false;
    }

    public function getConceptsCount(User $user)
    {
        return AgreementModelTable::getInstance()->createQuery()->where('activity_id = ? and dealer_id = ? and model_type_id = ?',
            array
            (
                $this->getId(),
                $user->getDealer()->getId(),
                self::CONCEPT_MODEL_TYPE_ID
            )
        )->count();
    }

    public function getIdName() {
        return sprintf('[%s] - %s', $this->getId(), $this->getName());
    }

    public function getBindedMaterials() {
        return ActivityMaterialsTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->execute();
    }

    public function getActivityVideoStatistics ()
    {
        return ActivityVideoRecordsStatisticsTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->execute();
    }

    public function isVideoRecordStatisticsActive ()
    {
        return ActivityVideoRecordsStatisticsTable::getInstance()->createQuery()->where('activity_id = ? and status = ?', array( $this->getId(), true ))->count() > 0;
    }

    public function getActiveVideoRecordStatisticHeaders ()
    {
        $statistic = ActivityVideoRecordsStatisticsTable::getInstance()->createQuery()->where('activity_id = ? and status = ?', array( $this->getId(), true ))->execute()->getFirst();

        if ($statistic) {
            return ActivityVideoRecordsStatisticsHeadersTable::getInstance()->createQuery()->where('parent_id = ?', $statistic->getId())->orderBy('position ASC')->execute();
        }

        return array();
    }

    /**
     * Check is activity statistic active in current year / quarter
     * @param $by_year
     * @param $by_q
     * @return bool
     */
    public function isActivityStatisticActivatedInPeriod ( $by_year, $by_q )
    {
        $periods = $this->getActivityStatisticPeriodsInfo();

        if (isset($periods[ $by_year ]) && in_array($by_q, $periods[ $by_year ])) {
            return true;
        }

        return false;
    }

    /**
     * Return activity status by user and quarter
     * @param $user
     * @param $quarter
     * @param bool $limit_activity
     * @param null $year
     * @return int
     * @internal param $filter_by_q
     */
    public function getStatusByQuarter ( $user, $quarter, $limit_activity = true, $year = null )
    {
        //Проверка на принудительное выполнения активности
        if ($this->checkActivityStatusByUser($user, $year, $quarter)) {
            return ActivityModuleDescriptor::STATUS_ACCEPTED;
        }

        $by_year = date('Y');
        if (!is_null($year)) {
            $by_year = $year;
        }

        $activity_status = ActivityStatusesFactory::getInstance()->getStatus($user, $this, $by_year, $quarter, true, $limit_activity);
        if ($activity_status != ActivityModuleDescriptor::STATUS_NONE) {
            return $activity_status;
        }

        //$last_status = ActivityModuleDescriptor::STATUS_NONE;
        /*if ($user instanceof User) {
            foreach ($this->getAllModuleDescriptors($user) as $descriptor) {
                $status = $descriptor->getStatus();

                if ($status == ActivityModuleDescriptor::STATUS_WAIT_DEALER)
                    return $status;

                if ($status > $last_status)
                    $last_status = $status;
            }
        }*/

        return ActivityModuleDescriptor::STATUS_NONE;
    }

    /**
     * @param $user
     * @param null $year
     * @param null $quarter
     * @return bool
     */
    private function checkActivityStatusByUser ( $user, $year = null, $quarter = null )
    {
        $dealer_id = 0;
        if (is_numeric($user)) {
            $dealer_id = $user;
        } else {
            $user_dealer = $user->getDealerUsers()->getFirst();
            if ($user_dealer) {
                $dealer_id = $user_dealer->getDealerId();
            }
        }

        if (is_numeric($dealer_id) && $dealer_id != 0) {
            return ActivitiesStatusByUsersTable::checkActivityStatus($this->getId(), $dealer_id, $year, $quarter);
        }

        return false;
    }

    /**
     * Check activity has been mandatory status with quarters
     * @return bool
     */
    public function hasMandatoryStatus ()
    {
        return MandatoryActivityQuartersTable::getInstance()->createQuery()->where('activity_id = ?', $this->getId())->count() > 0;
    }

    /**
     * Получить статус по активности для бюджета
     * @param $user
     * @param $quarter
     * @param bool $limit_activity
     * @param null $year
     * @return int
     */
    public function getStatusBudgetPointsByQuarter($user, $quarter, $limit_activity = true, $year = null) {
        $by_year = date('Y');
        if (!is_null($year)) {
            $by_year = $year;
        }

        return ActivityBudgetPointsStatusesFactory::getInstance()->getStatus($user, $this, $by_year, $quarter, true, $limit_activity);
    }

    /**
     * Get models count created by dealer, year, quarter
     * @param $dealer_id
     * @param $year
     * @param $quarter
     * @param bool $only_completed
     * @return int
     */
    public function getActivityCreatedModelsByParams ( $dealer_id, $year, $quarter, $only_completed = false )
    {
        $added_models_list = 0;

        $models_list = AgreementModelTable::getInstance()
            ->createQuery('am')
            ->select('am.id m_id, am.activity_id, am.created_at m_created_at, am.status m_status, r.status r_status')
            ->leftJoin('am.Report r')
            ->where('activity_id = ? and dealer_id = ?', array( $this->getId(), $dealer_id ))
            //->andWhere('year(created_at) = ? and quarter(created_at) = ?', array($year, $quarter))
            ->andWhere('year(created_at) = ?', array( $year ))
            ->andWhere('model_type_id != ?', self::CONCEPT_MODEL_TYPE_ID)
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $completed_models_count = 0;
        $completed_models = array();

        $models_accepted_ids = array();

        foreach ($models_list as $model) {
            //Если заявка выполнена полностью, либо заявка выполнена частично но с отправкой отчета на согласование, квартал заявки берем с логов
            if ($model[ 'm_status' ] == 'accepted' && !is_null($model[ 'r_status' ]) && ( $model[ 'r_status' ] == 'accepted' || $model[ 'r_status' ] == 'wait' )) {
                $models_accepted_ids[] = $model[ 'm_id' ];
                $completed_models[ $model[ 'm_id' ] ] = $model;
            } else {
                //Если заявка не выполнена или выполнена частично, но без отчета, берем активный квартал
                $current_q = D::getQuarter(D::calcQuarterData(time()));
                if ($current_q == $quarter) {
                    $added_models_list++;
                }
            }
        }

        if (count($models_accepted_ids) > 0) {
            $dates = Utils::getModelDateFromLogEntryWithYear(array_unique($models_accepted_ids));

            $already_checked = array();
            foreach ($dates as $date_item) {
                $date = D::calcQuarterData($date_item[ 'created_at' ]);

                if (!in_array($date_item[ 'object_id' ], $already_checked)) {
                    $already_checked[] = $date_item[ 'object_id' ];
                    if ($only_completed) {
                        $model = $completed_models[ $date_item[ 'object_id' ] ];

                        if ($model[ 'm_status' ] == 'accepted' && $model[ 'r_status' ] == 'accepted' && D::getQuarter(D::calcQuarterData($date)) == $quarter) {
                            $completed_models_count++;
                        }
                    } else {
                        if (D::getQuarter(D::calcQuarterData($date)) == $quarter) {
                            $added_models_list++;
                        }
                    }
                }
            }
        }

        //Учитываем только выполненные заявки
        if ($only_completed) {
            return $completed_models_count;
        }

        return $added_models_list;
    }

    /**
     * @param $dealer_id
     * @param $year
     * @param $quarter
     * @return int
     */
    public function getActivityCompletedModelsByParams ( $dealer_id, $year, $quarter )
    {
        $models_list = AgreementModelTable::getInstance()
            ->createQuery('am')
            ->select('am.id m_id, am.created_at m_created_at, am.status m_status, r.status r_status')
            ->innerJoin('am.Report r')
            ->where('am.activity_id = ? and am.dealer_id = ?', array( $this->getId(), $dealer_id ))
            //->andWhere('year(am.created_at) = ? and quarter(am.created_at) = ?', array($year, $quarter))
            ->andWhere('year(am.created_at) = ? ', array( $year ))
            ->andWhere('am.model_type_id != ?', self::CONCEPT_MODEL_TYPE_ID)
            ->andWhere('am.status = ? and r.status = ?', array( 'accepted', 'accepted' ))
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $completed_models_count = 0;
        $models_ids = array();
        foreach ($models_list as $model) {
            $models_ids[] = $model[ 'm_id' ];
        }

        if (count($models_ids) > 0) {
            $dates = Utils::getModelDateFromLogEntryWithYear($models_ids);
            foreach ($dates as $date) {
                $date = D::calcQuarterData($date[ 'created_at' ]);
                if (!is_null($date) && D::getQuarter($date) == $quarter) {
                    $completed_models_count++;
                }
            }
        }

        return $completed_models_count;
    }

    public function isActivityStatisticHasSteps() {
        return ActivityExtendedStatisticFieldsTable::getInstance()->createQuery()->where('activity_id = ? and step_id != ?', array($this->getId(), 0))->count();
    }
}
