<?php

/**
 * ActivityTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ActivityTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return ActivityTable
     */
    static function getInstance()
    {
        return Doctrine_Core::getTable('Activity');
    }

    function autoFinish()
    {
        return $this->createQuery()
            ->update()
            ->set('finished', 1)
            ->where('finished=? and (custom_date is null or custom_date=?) and end_date<?', array(
                false, '', D::toDb(time())
            ))->execute();
    }

    function getAcceptStat($year, Dealer $dealer)
    {
        $stat = array(
            1 => array(),
            2 => array(),
            3 => array(),
            4 => array()
        );

        $statsResult = ActivityAcceptStatsTable::getInstance()->createQuery()->where('dealer_id = ? and year = ?', array($dealer->getId(), $year))->fetchOne();
        if ($statsResult) {
            $isLimitRunActivities = array();
            for ($i = 1; $i <= 4; $i++) {
                $qfunc = 'getQ' . $i;

                $qResult = array_filter(explode(':', $statsResult->$qfunc()));
                if (count($qResult) > 0) {
                    $qResult = array_map(function($element) use(&$isLimitRunActivities) {
                        $activity = ActivityTable::getInstance()
                            ->createQuery()
                            ->select('is_limit_run')
                            ->where('id = ?', $element)
                                ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                        if($activity) {
                            if($activity['is_limit_run']) {
                                if(!in_array($element, $isLimitRunActivities)) {
                                    $isLimitRunActivities[] = $element;

                                    return $element;
                                }
                                else {
                                    return null;
                                }
                            }

                            return $element;
                        }
                    }, $qResult);

                    $stat[$i] = array_filter($qResult);
                }
            }
        }

        return $stat;
    }

    function fillAcceptStats($result, &$stat, $dealer, $year)
    {
        if (is_null($stat))
            $stat = array(
                1 => array(),
                2 => array(),
                3 => array(),
                4 => array()
            );

        $minDay = 5;
        $limitActivity = array();
        $incompleteActivities = array();

        foreach ($result as $row) {
            $activity = $row->getActivity();
            $report = $row->getReport();
            if (empty($report) || is_null($report->getId())) {
                if (!in_array($activity->getId(), $incompleteActivities))
                    $incompleteActivities[] = $activity->getId();

                continue;
            }

            if ($report && $report->getStatus() != 'accepted')
                continue;

            $date = $report->getAcceptDate();
            $entry = LogEntryTable::getInstance()
                ->createQuery()
                ->select('created_at')
                ->where('object_id = ?', array($row->getId()))
                ->andWhere('object_type = ? and icon = ? and action = ?', array('agreement_report', 'clip', 'edit'))
                ->orderBy('id DESC')
                ->limit(1)
                ->fetchOne();

            if ($entry)
                $date = $entry->getCreatedAt();

            $nDate = D::calcQuarterData($date);

            $q = D::getQuarter($nDate);
            $tYear = date('Y', $nDate);

            if (!$activity->isActivityStatisticComplete($dealer, $nDate, false, true) || $tYear != $year) {
                continue;
            }

            if (!in_array($activity->getId(), $stat[$q])) {
                if (count($stat[$q]) < 4) {
                    if ($activity->isLimitRun()) {
                        if (!in_array($activity->getId(), $limitActivity)) {
                            $limitActivity[] = $activity->getId();
                            $stat[$q][] = $activity->getId();
                        } else
                            continue;
                    } else {
                        $stat[$q][] = $activity->getId();
                    }
                }
            }
        }

        return $stat;
    }

    /**
     * @param $result
     * @param $stat
     * @param $dealer
     * @param $year
     * @return array
     */
    static function fillAcceptStatsArray($result, &$stat, $dealer, $year)
    {
        if (is_null($stat))
            $stat = array(
                1 => array(),
                2 => array(),
                3 => array(),
                4 => array()
            );

        $limitActivity = array();
        $incompleteActivities = array();

        $activities = array();
        $activityStatsQ = array();

        foreach ($result as $row) {
            if (isset($row['report_id']) && is_null($row['report_id'])) {
                if (!in_array($row['activity_id'], $incompleteActivities))
                    $incompleteActivities[] = $row['activity_id'];

                continue;
            }

            $date = $row['rAcceptDate'];
            if (isset($row['logCreatedAt']) && !empty($row['logCreatedAt'])) {
                $date = $row['logCreatedAt'];
            }

            $nDate = D::calcQuarterData($date);
            $q = D::getQuarter($nDate);
            $tYear = date('Y', $nDate);

            if (!array_key_exists($row['activity_id'], $activities)) {
                $activities[$row['activity_id']] = ActivityTable::getInstance()->createQuery()->where('id = ?', $row['activity_id'])->fetchOne();
            }

            $activity = $activities[$row['activity_id']];
            if (!$activity->isActivityStatisticComplete($dealer, $nDate, false, true) || $tYear != $year) {
                continue;
            }

            $activityStatsQ[$q][] = array('activity_id' => $activity->getId(), 'is_limit' => $activity->isLimitRun());
        }

        ksort($activityStatsQ);
        foreach($activityStatsQ as $q => $datas)
        {
            foreach($datas as $data)
            {
                if (!in_array($data['activity_id'], $stat[$q]) && count($stat[$q]) < 4) {
                    if ($data['is_limit']) {
                        if (!in_array($data['activity_id'], $limitActivity)) {
                            $limitActivity[] = $data['activity_id'];
                            $stat[$q][] = $data['activity_id'];

                        } else {
                            continue;
                        }
                    } else {
                        $stat[$q][] = $data['activity_id'];
                    }
                }
            }
        }

        if ($dealer['id'] == 483) {
            var_dump($stat);
        }


        return $stat;
    }

    /**
     * @param $user
     * @param $query
     */
    static function checkActivity($user, &$query)
    {
        /*if (!$user->isAdmin()) {
            if ($user->getAuthUser()->getSpecialBudgetStatus() != 1)
                $query->andWhere('a.id != ?', 37);
        }*/

        /*Service dialogs*/
        $dealer = $user->getAuthUser()->getDealerUsers()->getFirst();
        if ($dealer) {
            $servicesData = DealersServiceDataTable::getInstance()->createQuery()
                ->where('dealer_id = ? and status = ?', array($dealer->getDealerId(), 'accepted'))->execute();

            foreach ($servicesData as $data)
                self::makeQuery($query, $data->getDialog()->getActivityId());
        }
    }

    static function makeQuery(&$query, $id)
    {
        $query->orWhere('a.hide = ? and a.id = ?', array(true, $id));
    }

    public static function getActivitesList() {
        return self::getInstance()->createQuery()->orderBy('id DESC');
    }

}
