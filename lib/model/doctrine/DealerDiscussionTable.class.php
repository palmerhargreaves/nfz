<?php

/**
 * DealerDiscussionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DealerDiscussionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return DealerDiscussionTable
     */
    static function getInstance()
    {
        return Doctrine_Core::getTable('DealerDiscussion');
    }

    /**
     * Returns a discussion related with a delaer.
     * Creates new one if not exists.
     *
     * @param Dealer $dealer
     * @return Discussion
     */
    function findDiscussion(Dealer $dealer)
    {

        $dealer_discussion = null;

        $id = $dealer->getId();
        if (!empty($id))
            $dealer_discussion = $this->findOneByDealerId($dealer->getId());

        if (!$dealer_discussion) {
            $dealer_discussion = new DealerDiscussion();
            $dealer_discussion->setDealer($dealer);
            $discussion = new Discussion();
            $discussion->save();
            $dealer_discussion->setDiscussionId($discussion->getId());
            $dealer_discussion->save();
        }

        $discussion = DiscussionTable::getInstance()->find($dealer_discussion->getDiscussionId());
        if (!$discussion) {
            $discussion = new Discussion();
            $discussion->save();
            $dealer_discussion->setDiscussionId($discussion->getId());
            $dealer_discussion->save();
        }

        return $discussion;
    }

    function countUnread(User $user)
    {
        if ($user->isManager())
            return $this->countUnreadForManager($user);

        if ($user->isDealerUser())
            return $this->countUnreadForDealer($user);

        return 0;
    }

    public function getUnreadMessages(User $user, $mark_as_read = false) {
        $query = MessageTable::getInstance()
            ->createQuery('m')
            ->select('*')
            ->innerJoin('m.Discussion d')
            ->innerJoin('m.User u')
            //->innerJoin('d.DealerDiscussions dd')
            ->where('m.user_id != ?', $user->getId())
            ->andWhereIn('u.group_id', array(3))
            ->andWhere('m.msg_show = ? and mark_as_read = ? and system = ?', array(1, false, 0))
            ->andWhere('m.id > ?', $this->getMinUnread($user, $mark_as_read))
            //->groupBy('m.discussion_id')
            ->orderBy('m.created_at DESC');

        return $query;
    }

    public function getReadMessages(User $user) {
        $query = MessageTable::getInstance()
            ->createQuery('m')
            ->select('*')
            ->innerJoin('m.Discussion d')
            //->innerJoin('d.DealerDiscussions dd')
            ->where('m.user_id != ?', $user->getId())
            ->andWhere('m.msg_show = ? and mark_as_read = ? and system = ?', array(1, false, 0))
            ->andWhere('m.id < ?', $this->getMinUnread($user, false))
            //->groupBy('m.discussion_id')
            ->orderBy('m.created_at DESC');

        return $query;
    }

    private function makeMessagesQuery(User $user, $start_from = 0) {
        $query = MessageTable::getInstance()
            ->createQuery('m')
            ->select('*')
            ->innerJoin('m.Discussion d')
            ->where('m.user_id != ?', $user->getId())
            ->andWhere('m.msg_show = ? and mark_as_read = ? and system = ?', array(1, false, 0))
            ->limit(sfConfig::get('app_max_items_on_page'))
            ->orderBy('m.created_at DESC');

        if ($start_from != 0) {
            $query->offset($start_from);
        }

        return $query;
    }

    public function getUnreadMessagesByType(User $user, $messages_type, $start_from = 0)
    {
        $query = $this->makeMessagesQuery($user, $start_from)->andWhere('m.id > ?', $this->getMinUnread($user, false));
        if ($messages_type != Discussion::MODELS_MESSAGES) {
            $query->innerJoin('d.DealerDiscussions dd');
        } else {
            $query->innerJoin('d.Models models');
        }

        return $query;
    }

    /**
     * @param User $user
     * @param $messages_type
     * @param int $start_from
     * @return mixed
     */
    public function getReadedMessagesByType(User $user, $messages_type, $start_from = 0)
    {
        $query = $this->makeMessagesQuery($user, $start_from)->andWhere('m.id < ?', $this->getMinUnread($user, false));
        if ($messages_type != Discussion::MODELS_MESSAGES) {
            $query->innerJoin('d.DealerDiscussions dd');
        } else {
            $query->innerJoin('d.Models models');
        }

        return $query;
    }


    protected function countUnreadForDealer(User $user)
    {
        $dealer = $user->getDealer();
        if (!$dealer) {
            return 0;
        }

        $discussion = $this->findDiscussion($user->getDealer());
        if ($discussion) {
            return $discussion->countUnreadMessages($user);
        }

        return 0;
    }

    protected function countUnreadForManager(User $user)
    {
        return MessageTable::getInstance()
            ->createQuery('m')
            ->innerJoin('m.Discussion d')
            ->innerJoin('d.DealerDiscussions dd')
            ->where('m.id>?', $this->getMinUnread($user, false))
            ->count();
    }

    protected function getUnreadForDealer(User $user)
    {
        $discussion = $this->findDiscussion($user->getDealer());

        if ($discussion) {
            return $discussion->getUnreadMessages($user);
        }

        return 0;
    }

    protected function getUnreadForManager(User $user)
    {
        return MessageTable::getInstance()
            ->createQuery('m')
            ->innerJoin('m.Discussion d')
            ->innerJoin('d.DealerDiscussions dd')
            ->where('m.id > ?', $this->getMinUnread($user, false))
            ->orderBy('m.id DESC');
    }

    protected function getReadForDealer(User $user)
    {
        $discussion = $this->findDiscussion($user->getDealer());
        if ($discussion) {
            return $discussion->getUnreadMessages($user);
        }

        return 0;
    }

    protected function getReadForManager(User $user)
    {
        return MessageTable::getInstance()
            ->createQuery('m')
            ->innerJoin('m.Discussion d')
            ->innerJoin('d.DealerDiscussions dd')
            ->where('m.id < ?', $this->getMinUnread($user, false))
            ->orderBy('m.id DESC');
    }

    private function getMinUnread(User $user, $mark_as_read = true)
    {
        $last_read = DiscussionLastReadTable::getInstance()
            ->createQuery('lr')
            ->select('lr.message_id')
            ->innerJoin('lr.Message m')
            ->innerJoin('m.Discussion d')
            //->innerJoin('d.DealerDiscussions dd')
            ->where('lr.user_id=?', $user->getId())
            ->orderBy('lr.message_id DESC')
            ->limit(1)
            ->fetchOne();

        if ($last_read) {
            return $last_read->getMessageId();
        }

        $last = $this->getLastMessage();
        if (!$last) {
            return 0;
        }

        if ($mark_as_read) {
            $last_read_discussion = DiscussionLastReadTable::getInstance()->findOneByMessageId($last->getId());
            if (!$last_read_discussion) {
                $last_read = new DiscussionLastRead();
                $last_read->setUserId($user->getId());
                $last_read->setMessageId($last->getId());
                $last_read->save();
            }

            return $last_read->getMessageId();
        }

        return 0;
    }

    private function getLastMessage()
    {
        return MessageTable::getInstance()
            ->createQuery('m')
            ->select('m.id')
            ->innerJoin('m.Discussion d')
            ->innerJoin('d.DealerDiscussions dd')
            ->orderBy('m.id desc')
            ->limit(1)
            ->fetchOne();
    }
}
