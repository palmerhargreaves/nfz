<?php

/**
 * ActivityExtendedStatisticFields
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityExtendedStatisticFields extends BaseActivityExtendedStatisticFields
{
	const FIELD_TYPE_VALUE = 'dig';
	const FIELD_TYPE_ANY_VALUE = 'any';
	const FIELD_TYPE_DATE = 'date';
	const FIELD_TYPE_CALC = 'calc';
	const FIELD_TYPE_TEXT = 'text';
    const FIELD_TYPE_FILE = 'file';
    const FIELD_TYPE_MONEY = 'money';

	const FIELD_CALC_SYMBOL_PLUS = 'plus';
	const FIELD_CALC_SYMBOL_MINUS = 'minus';
	const FIELD_CALC_SYMBOL_DIVIDE = 'divide';
	const FIELD_CALC_SYMBOL_PERCENT = 'percent';
    const FIELD_CALC_SYMBOL_MULTIPLE = 'multiple';

	private $_fieldTypes = array(
	    self::FIELD_TYPE_DATE => 'Дата',
        self::FIELD_TYPE_VALUE => 'Значение',
        self::FIELD_TYPE_CALC => 'Вычисляемое значение',
        self::FIELD_TYPE_TEXT => 'Текст',
        self::FIELD_TYPE_ANY_VALUE => 'Цифры / Символы',
        self::FIELD_TYPE_FILE => 'Файл',
        self::FIELD_TYPE_MONEY => 'Копейки');

	public function getFieldType() {
		return $this->_fieldTypes[$this->getValueType()];
	} 

	public function getFieldValue() {
		if($this->getValueType() == self::FIELD_TYPE_CALC) {
			$fieldsResult = array();
			$calFields = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('parent_field = ?', $this->getId())->execute();

			$calcSymbol = '';
			foreach($calFields as $field) {
				$fieldsResult[] = '( '.$field->getCalculatedField()->getHeader().' )';
				$calcSymbol = $field->getCalcType();
			}

			return implode('<strong>'.$this->getCalcSymbol($calcSymbol).'</strong>', $fieldsResult);
		}
		else if($this->getValueType() == self::FIELD_TYPE_TEXT)
			return '';

		return 'Значение';
	}

	public function getFieldUserValue($activity, $user, $concept) {
		$user = $user->getAuthUser();
		
		$userDealer = $user->getDealerUsers()->getFirst();
		$dealer = null;
		if($userDealer)
      		$dealer = DealerTable::getInstance()->createQuery('d')->where('id = ?', $userDealer->getDealerId())->fetchOne();

		if(!$dealer)
			return '';

		//$field = ActivityExtendedStatisticFieldsDataTable::getInstance()->createQuery()->where('field_id = ? and user_id = ? and dealer_id = ?', array($this->getId(), $user->getId(), $dealer->getId()))->fetchOne();
		$query = ActivityExtendedStatisticFieldsDataTable::getInstance()->createQuery()->where('field_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()));
		if($concept)
			$query->andWhere('concept_id = ?', $concept);

		$field = $query->fetchOne();
		//$field = ActivityExtendedStatisticFieldsDataTable::getInstance()->createQuery()->where('field_id = ? and user_id = ?', array($this->getId(), $user->getId()))->fetchOne();
		if(!$field)
		{
			$field = new ActivityExtendedStatisticFieldsData();
			$field->setFieldId($this->getId());
			$field->setUserId($user->getId());
			$field->setDealerId($dealer->getId());

			if($concept)
            	$field->setConceptId($concept);

			$val = '';
			if($this->getValueType() == self::FIELD_TYPE_DATE)
				$val = sprintf('%s-%s', date('d.m.Y'), date('d.m.Y'));

			$field->setValue($val);
			$field->save();
		}

		return $field;
	}

    public function calculateValue($user, $createdAt = '') {
		if(is_numeric($user)) {
            $dealerId = $user;
        }
		else {
            $dealerId = $user->getAuthUser()->getDealer()->getId();
        }

		//$calcFields = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('field_id = ? and user_id = ?', array($this->getId(), $user->getId()))->orderBy('order ASC')->execute();
		$calcFields = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('parent_field = ?', $this->getId())->orderBy('id ASC')->execute();

		$values = array();
		$calcType = '';

        foreach($calcFields as $field)
		{
			$calcType = $field->getCalcType();

            $checkField = ActivityExtendedStatisticFieldsTable::getInstance()->find($field->getCalcField());
			if($checkField && $checkField->getValueType() == self::FIELD_TYPE_CALC) {
				$values[] = $checkField->calculateValue($user, $createdAt);
			}
			else {
				$query = ActivityExtendedStatisticFieldsDataTable::getInstance()
                    ->createQuery()
                    ->where('field_id = ? and dealer_id = ?',
                        array(
                            $field->getCalcField(),
                            $dealerId
                        )
                    );

                if(!empty($createdAt)) {
                    $query->andWhere('created_at LIKE ?', $createdAt.'%');
                }

                $calcFields = $query->execute();
                if($calcFields) {
                    foreach($calcFields as $calcField) {
                        $values[] = $calcField->getValue();
                    }
				}
			}
		}

        if(!isset($values[0]) || !isset($values[1])) {
            return 0;
        }

        if(!is_numeric($values[0])) {
            $values[0] = intval($values[0]);
        }

        if(!is_numeric($values[1])) {
            $values[1] = intval($values[1]);
        }

        if($calcType == self::FIELD_CALC_SYMBOL_PLUS) {
            return isset($values[0]) ? $values[0] + $values[1] : '';
        }
		else if($calcType == self::FIELD_CALC_SYMBOL_MINUS) {
            return isset($values[0]) ? $values[0] - $values[1] : '';
        }
		else if($calcType == self::FIELD_CALC_SYMBOL_DIVIDE) {
			if($values[1] != 0) {
                return round($values[0] / $values[1], 2);
            }

			return 0;
		}
		else if($calcType == self::FIELD_CALC_SYMBOL_PERCENT) {
			return round($values[0] * $values[1] / 100, 2);
		}
	}

	public function isCalcField() {
		return ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('parent_field = ?', $this->getId())->orderBy('id ASC')->count() > 0 ? true : false;
	}

	public function getCalcFields() {
		$fields = array();
		$result = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('parent_field = ?', $this->getId())->orderBy('id ASC')->execute();

		foreach($result as $r)
			$fields[] = $r->getCalcField();

		return implode(":", $fields);
	}

	public function useInCalculate() {
		return ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('calc_field = ?', $this->getId())->orderBy('id ASC')->count() > 0 ? true : false;
	}

	public function getCalculateSymbol() {
		$res = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('calc_field = ?', $this->getId())->orderBy('id ASC')->fetchOne();

		if(!$res)
			$res = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('parent_field = ?', $this->getId())->orderBy('id ASC')->fetchOne();

		return $res ? $res->getCalcType() : '';
	}

	public function getParentCalcField() {
		$field = ActivityExtendedStatisticFieldsCalculatedTable::getInstance()->createQuery()->where('calc_field = ?', $this->getId())->fetchOne();

		return $field ? $field->getParentField()->getId() : '0';
	}

	public function getCalcSymbol($symbol) {
		switch($symbol) {
			case self::FIELD_CALC_SYMBOL_PLUS:
				return '+';
			break;

			case self::FIELD_CALC_SYMBOL_MINUS:
				return '-';
			break;

			case self::FIELD_CALC_SYMBOL_DIVIDE:
				return '/';
			break;

			case self::FIELD_CALC_SYMBOL_PERCENT:
				return '%';
			break;
		}

		return '+';
	}

	
}
